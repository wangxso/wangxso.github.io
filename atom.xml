<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>非典型程序员的一生</title>
  
  
  <link href="https://wangxso.github.io/atom.xml" rel="self"/>
  
  <link href="https://wangxso.github.io/"/>
  <updated>2023-09-14T08:02:30.608Z</updated>
  <id>https://wangxso.github.io/</id>
  
  <author>
    <name>wangxso</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenCDA V2X通信相关</title>
    <link href="https://wangxso.github.io/2023/09/14/OpenCDA%20V2X%E9%80%9A%E4%BF%A1%E7%9B%B8%E5%85%B3/"/>
    <id>https://wangxso.github.io/2023/09/14/OpenCDA%20V2X%E9%80%9A%E4%BF%A1%E7%9B%B8%E5%85%B3/</id>
    <published>2023-09-13T22:19:49.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、V2X-Manager"><a href="#一、V2X-Manager" class="headerlink" title="一、V2X Manager"></a>一、V2X Manager</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><ol><li><p>变量</p><ul><li><p>cav_world(object): OpenCDA的对象，详细可见<code>core/common/cav_world.py</code>.定制的世界对象，可以保存所有的CDA车辆信息和管理共享ML模型，在联合仿真中也可以保存Sumo-Carla的ID映射。</p></li><li><p>config_yaml(dict): v2x模块的配置信息字典变量。</p></li><li><p>vid: 相应vehicle manager的uuid。</p></li></ul></li><li><p>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, cav_world, config_yaml, vid</span>):</span><br><span class="line">        <span class="comment"># if disabled, no cooperation will be operated</span></span><br><span class="line">        <span class="comment"># 如果是disabled，协作相关的不会被运用。</span></span><br><span class="line">        self.cda_enabled = config_yaml[<span class="string">&#x27;enabled&#x27;</span>]</span><br><span class="line">        <span class="comment"># 读取通信距离</span></span><br><span class="line">        self.communication_range = config_yaml[<span class="string">&#x27;communication_range&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># found CAVs nearby</span></span><br><span class="line">        <span class="comment"># 被发现的周边的CAVs</span></span><br><span class="line">        self.cav_nearby = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># used for cooperative perception.</span></span><br><span class="line">        <span class="comment"># 收到数据的缓存, dict</span></span><br><span class="line">        self._recieved_buffer = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># used for platooning communication</span></span><br><span class="line">        <span class="comment"># 队列通信，platooning_plugin是队列通信器件所使用的队列插件</span></span><br><span class="line">        self.platooning_plugin = PlatooningPlugin(</span><br><span class="line">            self.communication_range, self.cda_enabled)</span><br><span class="line"><span class="comment"># weakref.ref 是 Python 中的一个内置模块，它提供了一种创建对象的弱引用的方式。</span></span><br><span class="line">        <span class="comment"># 这里的作用应该是让cav_world在不被使用的时候能够及时被回收。</span></span><br><span class="line">        self.cav_world = weakref.ref(cav_world)()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ego position buffer. use deque so we can simulate lagging</span></span><br><span class="line">        <span class="comment"># ego car的位置和速度信息缓存，使用deque可以模拟延迟。</span></span><br><span class="line">        self.ego_pos = deque(maxlen=<span class="number">100</span>)</span><br><span class="line">        self.ego_spd = deque(maxlen=<span class="number">100</span>)</span><br><span class="line">        <span class="comment"># used to exclude the cav self during searching</span></span><br><span class="line">        <span class="comment"># 用于搜索周边车辆的时候排除自身</span></span><br><span class="line">        self.vid = vid</span><br><span class="line"></span><br><span class="line">        <span class="comment"># check if lag or noise needed to be added during communication</span></span><br><span class="line">        <span class="comment"># 添加一些噪声和延迟</span></span><br><span class="line">        self.loc_noise = <span class="number">0.0</span></span><br><span class="line">        self.yaw_noise = <span class="number">0.0</span></span><br><span class="line">        self.speed_noise = <span class="number">0.0</span></span><br><span class="line">        self.lag = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add noise to V2X communication if needed.</span></span><br><span class="line">        <span class="comment"># 如果在配置文件中配置，就添加相关的噪声</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;loc_noise&#x27;</span> <span class="keyword">in</span> config_yaml:</span><br><span class="line">            self.loc_noise = config_yaml[<span class="string">&#x27;loc_noise&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;yaw_noise&#x27;</span> <span class="keyword">in</span> config_yaml:</span><br><span class="line">            self.yaw_noise = config_yaml[<span class="string">&#x27;yaw_noise&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;speed_noise&#x27;</span> <span class="keyword">in</span> config_yaml:</span><br><span class="line">            self.speed_noise = config_yaml[<span class="string">&#x27;speed_noise&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;lag&#x27;</span> <span class="keyword">in</span> config_yaml:</span><br><span class="line">            self.lag = config_yaml[<span class="string">&#x27;lag&#x27;</span>]</span><br></pre></td></tr></table></figure><p>该方法是来初始化v2x_manager的，相关的逻辑在注释中已经写出。这里大概是通过本身所拥有的cav_nearby字典来保存发现的周围车辆发送的V2X信息。</p></li></ol><h3 id="update-info"><a href="#update-info" class="headerlink" title="update_info"></a>update_info</h3><ol><li>变量<ul><li>ego_pos: 车辆的位置信息，是carla的transform对象</li><li>ego_spd: 车辆的速度信息，float，km&#x2F;h</li></ul></li><li>方法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_info</span>(<span class="params">self, ego_pos, ego_spd</span>):</span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       Update all communication plugins with current localization info.</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       <span class="comment"># 更新所有的通信插件中的当前位置信息</span></span><br><span class="line">       self.ego_pos.append(ego_pos)</span><br><span class="line">       self.ego_spd.append(ego_spd)</span><br><span class="line">       <span class="comment"># 并且同时搜索周围的车辆信息</span></span><br><span class="line">       self.search()</span><br><span class="line"></span><br><span class="line">       <span class="comment"># the ego pos in platooning_plugin is used for self-localization,</span></span><br><span class="line">       <span class="comment"># so we shouldn&#x27;t add noise or lag.</span></span><br><span class="line">       self.platooning_plugin.update_info(ego_pos, ego_spd)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先会在本车的<code>ego_pos</code>和<code>ego_spd</code>的队列中添加当前的位置，然后所有周围的车辆信息，同时更新所有的插件中的当前位置信息。下面我们看看<code>search()</code>中是怎么实现的。</p><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><ol><li><p>变量</p><p>无</p></li><li><p>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Search the CAVs nearby.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取当前CAV World中的车辆字典</span></span><br><span class="line">        vehicle_manager_dict = self.cav_world.get_vehicle_managers()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取所有车辆的vid和vm</span></span><br><span class="line">        <span class="keyword">for</span> vid, vm <span class="keyword">in</span> vehicle_manager_dict.items():</span><br><span class="line">            <span class="comment"># avoid the Nonetype error at the first simulation step</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> vm.v2x_manager.get_ego_pos():</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># avoid add itself as the cav nearby</span></span><br><span class="line">            <span class="keyword">if</span> vid == self.vid:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 计算车辆和当前车的距离</span></span><br><span class="line">            distance = compute_distance(</span><br><span class="line">                self.ego_pos[-<span class="number">1</span>].location,</span><br><span class="line">                vm.v2x_manager.get_ego_pos().location)</span><br><span class="line"><span class="comment"># 如果距离在通信范围内，就将周围cav的获取的信息更新</span></span><br><span class="line">            <span class="keyword">if</span> distance &lt; self.communication_range:</span><br><span class="line">                self.cav_nearby.update(&#123;vid: vm&#125;)</span><br></pre></td></tr></table></figure><p>大概的过程就是先从cav world里面获取所有的车辆信息，遍历这些车辆，通过计算车辆和当前车辆的距离信息，如果距离在通信范围内的话，就会将车辆发送的信息加入到<code>cav_nearby</code>里面。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>大概的方法就这些，主要就是实现一个<code>search</code>的方法，还有一些方法没有提到比如<code>get_ego_pos</code>和<code>get_ego_speed</code>这些都是在获取位置和速度信息的时候增加一些噪声。</p><h2 id="二、RSUManager-鉴定为半成品"><a href="#二、RSUManager-鉴定为半成品" class="headerlink" title="二、RSUManager(鉴定为半成品)"></a>二、RSUManager(鉴定为半成品)</h2><h3 id="init-1"><a href="#init-1" class="headerlink" title="init"></a>init</h3><ol><li><p>变量</p><ul><li>carla_world(carla.World): Carla的world对象，我们从中获取蓝图(blueprint)</li><li>config_yaml(dict): 关于RSU的配置信息</li><li>carla_map(carla.Map):  carla里面的地图对象</li><li>cav_world(object): cav世界中的相关信息，包括车辆信息等</li><li>current_time(str): 仿真开始的时间戳，用于数据导出</li><li>data_dumping(bool)：在仿真期间是否导出传感器信息</li></ul></li><li><p>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">            self,</span></span><br><span class="line"><span class="params">            carla_world,</span></span><br><span class="line"><span class="params">            config_yaml,</span></span><br><span class="line"><span class="params">            carla_map,</span></span><br><span class="line"><span class="params">            cav_world,</span></span><br><span class="line"><span class="params">            current_time=<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="params">            data_dumping=<span class="literal">False</span></span>):</span><br><span class="line"></span><br><span class="line">        self.rid = config_yaml[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">        <span class="comment"># The id of rsu is always a negative int</span></span><br><span class="line">        <span class="comment"># rsu的id永远是一个负整数，这是为了和车辆id进行区分</span></span><br><span class="line">        <span class="keyword">if</span> self.rid &gt; <span class="number">0</span>:</span><br><span class="line">            self.rid = -self.rid</span><br><span class="line"></span><br><span class="line">        <span class="comment"># read map from the world everytime is time-consuming, so we need</span></span><br><span class="line">        <span class="comment"># explicitly extract here</span></span><br><span class="line">        <span class="comment"># 每次都读取地图会很耗时，所以我们在一开始就读取，这样只用一次就好了。</span></span><br><span class="line">        self.carla_map = carla_map</span><br><span class="line"></span><br><span class="line">        <span class="comment"># retrieve the configure for different modules</span></span><br><span class="line">        <span class="comment"># 检索不同模块的配置信息</span></span><br><span class="line">        <span class="comment"># todo: add v2x module to rsu later</span></span><br><span class="line">        sensing_config = config_yaml[<span class="string">&#x27;sensing&#x27;</span>]</span><br><span class="line">        sensing_config[<span class="string">&#x27;localization&#x27;</span>][<span class="string">&#x27;global_position&#x27;</span>] = \</span><br><span class="line">            config_yaml[<span class="string">&#x27;spawn_position&#x27;</span>]</span><br><span class="line">        sensing_config[<span class="string">&#x27;perception&#x27;</span>][<span class="string">&#x27;global_position&#x27;</span>] = \</span><br><span class="line">            config_yaml[<span class="string">&#x27;spawn_position&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># localization module</span></span><br><span class="line">        <span class="comment"># 获取定位模块</span></span><br><span class="line">        self.localizer = LocalizationManager(carla_world,</span><br><span class="line">                                             sensing_config[<span class="string">&#x27;localization&#x27;</span>],</span><br><span class="line">                                             self.carla_map)</span><br><span class="line">        <span class="comment"># perception module</span></span><br><span class="line">        <span class="comment"># 获取预测模块</span></span><br><span class="line">        self.perception_manager = PerceptionManager(vehicle=<span class="literal">None</span>,</span><br><span class="line">                                                    config_yaml=sensing_config[<span class="string">&#x27;perception&#x27;</span>],</span><br><span class="line">                                                    cav_world=cav_world,</span><br><span class="line">                                                    carla_world=carla_world,</span><br><span class="line">                                                    data_dump=data_dumping,</span><br><span class="line">                                                    infra_id=self.rid)</span><br><span class="line">        <span class="comment"># 判断是否需要导出数据</span></span><br><span class="line">        <span class="keyword">if</span> data_dumping:</span><br><span class="line">            self.data_dumper = DataDumper(self.perception_manager,</span><br><span class="line">                                          self.rid,</span><br><span class="line">                                          save_time=current_time)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.data_dumper = <span class="literal">None</span></span><br><span class="line"><span class="comment"># 更新world中的rsu信息</span></span><br><span class="line">        cav_world.update_rsu_manager(self)</span><br></pre></td></tr></table></figure></li></ol><h3 id="update-info（main分支未完成）"><a href="#update-info（main分支未完成）" class="headerlink" title="update_info（main分支未完成）"></a>update_info（main分支未完成）</h3><ol><li><p>变量</p><p>无</p></li><li><p>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Call perception and localization module to</span></span><br><span class="line"><span class="string">        retrieve surrounding info an ego position.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># localization</span></span><br><span class="line">        self.localizer.localize()</span><br><span class="line"></span><br><span class="line">        ego_pos = self.localizer.get_ego_pos()</span><br><span class="line">        ego_spd = self.localizer.get_ego_spd()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># object detection todo: pass it to other CAVs for V2X percetion</span></span><br><span class="line">        objects = self.perception_manager.detect(ego_pos)</span><br></pre></td></tr></table></figure></li></ol><h3 id="run-step"><a href="#run-step" class="headerlink" title="run_step"></a>run_step</h3><ol><li><p>变量</p><p>无</p></li><li><p>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run_step</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       Currently only used for dumping data.</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       <span class="comment"># dump data</span></span><br><span class="line">       <span class="keyword">if</span> self.data_dumper:</span><br><span class="line">           self.data_dumper.run_step(self.perception_manager,</span><br><span class="line">                                     self.localizer,</span><br><span class="line">                                     <span class="literal">None</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="destroy"><a href="#destroy" class="headerlink" title="destroy"></a>destroy</h3><ol><li><p>变量</p><p>无</p></li><li><p>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">destroy</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Destroy the actor vehicle</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    self.perception_manager.destroy()</span><br><span class="line">    self.localizer.destroy()</span><br></pre></td></tr></table></figure></li></ol><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>这个RSU基本上属于半成品，或者半成品都不到，只是新建文件夹这种。反正在main分支上是这样的，其他分支我还需要后续看看。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、V2X-Manager&quot;&gt;&lt;a href=&quot;#一、V2X-Manager&quot; class=&quot;headerlink&quot; title=&quot;一、V2X Manager&quot;&gt;&lt;/a&gt;一、V2X Manager&lt;/h2&gt;&lt;h3 id=&quot;init&quot;&gt;&lt;a href=&quot;#init&quot;</summary>
      
    
    
    
    <category term="selfdriving" scheme="https://wangxso.github.io/categories/selfdriving/"/>
    
    
    <category term="V2X" scheme="https://wangxso.github.io/tags/V2X/"/>
    
    <category term="OpenCDA" scheme="https://wangxso.github.io/tags/OpenCDA/"/>
    
  </entry>
  
  <entry>
    <title>古朴韵味与荒野之美 ------- 西安、青海之旅</title>
    <link href="https://wangxso.github.io/2023/08/28/%E5%8F%A4%E6%9C%B4%E9%9F%B5%E5%91%B3%E4%B8%8E%E8%8D%92%E9%87%8E%E4%B9%8B%E7%BE%8E%20-------%20%E8%A5%BF%E5%AE%89%E3%80%81%E9%9D%92%E6%B5%B7%E4%B9%8B%E6%97%85/"/>
    <id>https://wangxso.github.io/2023/08/28/%E5%8F%A4%E6%9C%B4%E9%9F%B5%E5%91%B3%E4%B8%8E%E8%8D%92%E9%87%8E%E4%B9%8B%E7%BE%8E%20-------%20%E8%A5%BF%E5%AE%89%E3%80%81%E9%9D%92%E6%B5%B7%E4%B9%8B%E6%97%85/</id>
    <published>2023-08-28T06:40:00.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong>Sony A7R2, TAMRON 28-200mm F2.8-5.6 Di III RXD</strong></em></p><hr><p>三年疫情过去，说长不长，说短也不短。三年里从本科到硕士毕业，感觉对于学习的能力在下降，我更想去探索生活和记录生活。这次旅行是在写完毕业论文提交盲审后的一段安排。对于南方人说，北方或者说西北有一种朦胧的神秘，在我人生短短的二十多年中，到达过最北的大抵就是武汉了。这是我初次出去旅行和拍摄，对于拍摄我可能说是一个只会操纵相机的猴子。首先我们选择在西安中转，无他耳，只是因为飞西安便宜。西安给我留下了深刻的印象，美丽的古城映照着红墙的寺庙。可惜的是由于行程问题有许多遗憾留下。</p><h2 id="西安"><a href="#西安" class="headerlink" title="西安"></a>西安</h2><p>第一站，我跟随胡雪松的表妹来到了他所在的西北大学。西北大学这个校区校园虽然不大但是包含了西安所独有的古朴的气息。<br>来到西北大礼堂，也就是传说中的小白楼，了解了其中一段有趣的历史渊源。<br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/3813356871.png" alt="西北大礼堂"><br>走过西北大学的校园道路，我们看到脚下历史悠久的井盖。据说这样的井盖有上百个，并且有着不同的年份，西北大学的学生甚至以此做过研究发表论文。<br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/2938987182.png" alt="西北大学1954年井盖"><br>最后我们来到了西北大学博物馆，可惜来的不是时候，博物馆闭馆了。<br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/1476217277.jpg" alt="西北大学博物馆"></p><p>走出西北大学我们就和表妹告别了，准备向着古城墙出发，由于我们属于不太认识路的那种，在城墙边上寻找上去的道路，寻找了很久，沿途路过一处花团锦簇的饭店门口，有着春天的气息。<br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/1545597816.jpg" alt="DSC05932.jpg"></p><p>下面我们走过一段隧道就正式来到了，古城墙的入口。<br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/971842628.jpg" alt="地下通道"></p><p>走到城墙上方，一眼过去，人头攒动，虽然这天气真的很热。<br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/886221511.jpg" alt="西安古城墙"><br>远远地望去，嘿嘿，我也忘了这个地方叫啥了。<br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/1372622295.jpg" alt="城墙远眺"><br>缓缓的(快热死了)我们走到了终点，一个烽火台？下面。<br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/4060244418.jpg" alt="高瓴"><br>逛饿了，我们就开始吃饭吧！<br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/2512007600.jpg" alt="image (1).jpg"><br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/277929408.jpg" alt="image (5).jpg"><br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/3714476498.jpg" alt="image (6).jpg"><br>一天下来真的很累，所以我们决定会酒店休息咯。在回酒店的路上顺便看了一下<strong>大慈恩寺</strong>。<br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/2073555675.jpg" alt="image (4).jpg"><br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/4234501894.jpg" alt="image (3).jpg"><br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/957516762.jpg" alt="image (2).jpg"></p><h2 id="青海"><a href="#青海" class="headerlink" title="青海"></a>青海</h2><p>关于青海，我们首先到达的事西宁，一来到西宁我们就前往了酒店。第一天定的一个舒适性还不错，然后晚上我们决定出去觅食。这段旅行只能说不是很顺利，一开始我们跟随司机来到了青海湖，青海湖真的很美，但是我们不能很近的一亲芳泽。到了二郎剑景区，虽然说不要钱，但是这里的景色真的很一般。然后我们便驱车前往了下一个橡皮山，这里就是一个很烂的山坡，没啥好讲的。后面我们前往了茶卡盐湖，我们去的时候是四月下旬，反正盐湖没啥水，感觉不值得。第二天，我们继续绕着青海湖走，前往横断山脉那边的有着小瑞士之称的卓尔山，好巧不巧来了沙尘暴，上山后啥也看不着。然后回到西宁我们去了塔尔寺。最后青海小环线之旅就此结束了。</p><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/1791517377.jpg" alt="DSC06069 (1).jpg"><br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/795593279.jpg" alt="DSC06047.jpg"><br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/288589143.jpg" alt="314d6203d4bec7beda70eb053305fbc.jpg"><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/2596442127.jpg" alt="25ea9e2c74fadab79a4dd661d52c9b2.jpg"><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/598076735.jpg" alt="efba6f1018e088ce249f752fbfbe0b0.jpg"><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/3859517670.jpg" alt="f695b216443d722aff526bca2f40518.jpg"><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/2685070725.jpg" alt="326dad42a44eb1323af943669a2ace1.jpg"><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/1745825100.jpg" alt="a40a73f7a43f1222d0c582d3c92f256.jpg"><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/1981706962.jpg" alt="a4e2d0a86334f271f6716f85617eb37 (1).jpg"><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/4156691668.jpg" alt="DSC06230 (1).jpg"><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/4051008838.jpg" alt="DSC06124.jpg"><br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/4063973357.jpg" alt="WechatIMG31 (1).jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;Sony A7R2, TAMRON 28-200mm F2.8-5.6 Di III RXD&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;三年疫情过去，说长不长，说短也不短。三年里从本科到硕士毕业，感觉对于学习的能力在下降，我更想去探索生活和</summary>
      
    
    
    
    <category term="youji" scheme="https://wangxso.github.io/categories/youji/"/>
    
    
    <category term="摄影" scheme="https://wangxso.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>【OpenCDA】算法定制化开发</title>
    <link href="https://wangxso.github.io/2023/08/03/%E3%80%90OpenCDA%E3%80%91%E7%AE%97%E6%B3%95%E5%AE%9A%E5%88%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <id>https://wangxso.github.io/2023/08/03/%E3%80%90OpenCDA%E3%80%91%E7%AE%97%E6%B3%95%E5%AE%9A%E5%88%B6%E5%8C%96%E5%BC%80%E5%8F%91/</id>
    <published>2023-08-02T23:08:00.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定制化"><a href="#定制化" class="headerlink" title="定制化"></a>定制化</h1><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/120818750.png"><br>由于OpenCDA的高度模块化，您可以方便地用自己的算法替换任何默认模块。定制的方法是将您定制的模块放在<code>opencda/customize/...</code>里面，并且使用继承来覆盖原有算法。然后在<code>VehicleManager</code>中导入你定制的算法即可。如果你想要修改单个模块你所需要做的事情就是保证修改后的模块和原有的模块的输入输出格式保持一致。此外，对于Control算法模块的修改并不是在<code>opencda/customize/...</code> 里面，而是在原来的<code>opencda/core/acutation/</code></p><p>下面介绍各个模块都是如何进行算法的定制化开发的。</p><h2 id="Localization-Customization"><a href="#Localization-Customization" class="headerlink" title="Localization Customization"></a><strong><strong>Localization Customization</strong></strong></h2><p><code>LocalizationManager</code> 负责定位任务。在初始化阶段，将生成的GPS和IMU传感器来收集定位相关的信息。</p><p>里面的核心功能是<code>localize()</code> ，这个方法没有任何的输入，他主要的作用是为了<code>self._ego_pos</code> 和<code>_speed</code> 提供正确的值。</p><p>融合 GPS 和 IMU 数据的默认算法是卡尔曼滤波器(Kalman Filter)，它以当前的gps和imu数据为输入，然后返回修正后的$(x, y, z)$坐标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># opencda/core/sensing/localization/localization_manager.py:line 142</span></span><br><span class="line"><span class="keyword">from</span> opencda.core.sensing.localization.kalman_filter <span class="keyword">import</span> KalmanFilter</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LocalizationManager</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, vehicle, config_yaml, carla_map</span>):</span><br><span class="line">        self.kf = KalmanFilter(self.dt)</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">localize</span>(<span class="params">self</span>):</span><br><span class="line">        ...</span><br><span class="line">        corrected_cords = self.kf(x, y, z, speed, yaw, imu_yaw_rate)</span><br></pre></td></tr></table></figure><p>如果用户想要保留定位的整个结构而只更换滤波器（例如扩展卡尔曼滤波器），然后他只需要创建一个在  <code>opencda/customize/core/sensing/localization</code>目录下创建一个 <code>localization_manager.py</code> 。并且在<code>CustomizedLocalizationManager</code> 中初始化的时候加入拓展卡尔曼滤波器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># opencda/customize/core/sensing/localization/localization_manager.py:line 0</span></span><br><span class="line"><span class="keyword">from</span> opencda.core.sensing.localization.localization_manager <span class="keyword">import</span> LocalizationManager</span><br><span class="line"><span class="keyword">from</span> opencda.customize.core.sensing.localization.extented_kalman_filter <span class="keyword">import</span> ExtentedKalmanFilter</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomizedLocalizationManager</span>(<span class="title class_ inherited__">LocalizationManager</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, vehicle, config_yaml, carla_map</span>):</span><br><span class="line">        <span class="built_in">super</span>(CustomizedLocalizationManager, self).__init__(vehicle, config_yaml, carla_map)</span><br><span class="line">        self.kf = ExtentedKalmanFilter(self.dt)         </span><br></pre></td></tr></table></figure><p>然后去<code>VehicleManger</code> 类里面导入自定义模块并且设置其启用:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> opencda.core.sensing.localization.localization_manager <span class="keyword">import</span> LocalizationManager</span><br><span class="line"><span class="keyword">from</span> opencda.customize.core.sensing.localization.localization_manager <span class="keyword">import</span> CustomizedLocalizationManager</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VehicleManager</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, vehicle, config_yaml, application, carla_map, cav_world</span>):</span><br><span class="line">        <span class="comment"># self.localizer = LocalizationManager(vehicle, sensing_config[&#x27;localization&#x27;], carla_map)</span></span><br><span class="line">        self.localizer = CustomizedLocalizationManager(vehicle, sensing_config[<span class="string">&#x27;localization&#x27;</span>], carla_map)</span><br></pre></td></tr></table></figure><p>如果您想修改的更多，比如改变数据预处理等。只需要在</p><p><code>CustomizedLocalizationManager</code> 中填充<code>localize()</code> 中的<code>self._ego_gps</code> 和<code>self._speed</code> 不会对下游模块造成任何问题。</p><h2 id="Perception-Customization"><a href="#Perception-Customization" class="headerlink" title="Perception Customization"></a><strong><strong>Perception Customization</strong></strong></h2><p><code>PerceptionManager</code> 负责感知相关的任务。现在它支持车辆检测和交通信号灯检测。核心方法<code>detect(ego_pos)</code> 将定位模块的ego_car的自我位置作为输入，返回值是一个<code>objects</code> 字典，这个字典的key是对象的类别，值是该类别中世界坐标系下每个对象的属性(比如三维姿态等)。</p><p>要定义您自己的目标检测算法，请在<code>opencda/customize/core/sensing/perception/</code> 文件夹下面创建一个<code>perception_manager.py</code> 文件。这里的核心就是你的<code>your_algorithm(rgb_images, lidar_data)</code> 他的输入是获取的图像信息和激光雷达点云信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> opencda.core.sensing.perception.perception_manager <span class="keyword">import</span> PerceptionManager</span><br><span class="line"><span class="keyword">from</span> opencda.core.sensing.perception.obstacle_vehicle <span class="keyword">import</span> ObstacleVehicle</span><br><span class="line"><span class="keyword">from</span> opencda.core.sensing.perception.static_obstacle <span class="keyword">import</span> TrafficLight</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomziedPeceptionManager</span>(<span class="title class_ inherited__">PerceptionManager</span>):</span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, vehicle, config_yaml, cav_world, data_dump=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(CustomizedLocalizationManager, self).__init__(vehicle, config_yaml, cav_world, data_dump)</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">detect</span>(<span class="params">self, ego_pos</span>):</span><br><span class="line">        objects = &#123;<span class="string">&#x27;vehicles&#x27;</span>: [],</span><br><span class="line">                   <span class="string">&#x27;traffic_lights&#x27;</span>: [],</span><br><span class="line">                   <span class="string">&#x27;other_objects_you_wanna_add&#x27;</span> : []&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># retrieve current rgb images from all cameras</span></span><br><span class="line">        rgb_images = []</span><br><span class="line">        <span class="keyword">for</span> rgb_camera <span class="keyword">in</span> self.rgb_camera:</span><br><span class="line">            <span class="keyword">while</span> rgb_camera.image <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            rgb_images.append(cv2.cvtColor(np.array(rgb_camera.image),</span><br><span class="line">                    cv2.COLOR_BGR2RGB))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># retrieve lidar data from the sensor</span></span><br><span class="line">        lidar_data = self.lidar.data</span><br><span class="line">        </span><br><span class="line">        <span class="comment">########################################</span></span><br><span class="line">        <span class="comment"># this is where you put your algorithm #</span></span><br><span class="line">        <span class="comment">########################################</span></span><br><span class="line">        objects = your_algorithm(rgb_images, lidar_data)</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">type</span>(objects[<span class="string">&#x27;vehicles&#x27;</span>]) == ObstacleVehicle</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">type</span>(objects[<span class="string">&#x27;traffic_lights&#x27;</span>]) == TrafficLight</span><br><span class="line">         </span><br><span class="line">     <span class="keyword">return</span> objects</span><br></pre></td></tr></table></figure><h2 id="Behavior-Planning-Customization"><a href="#Behavior-Planning-Customization" class="headerlink" title="Behavior Planning Customization"></a><strong><strong>Behavior Planning Customization</strong></strong></h2><p>在仿真运行期间，<code>BehaviorAgent</code> 首先会通过函数<code>update_information</code>保存从<code>PerceptionManager</code> 和<code>LocalizationManager</code> 中获得的ego vehicle的位置、速度和周围物体信息。之后<code>BehaviorAgent</code> 将会调用函数<code>run_step()</code> 执行单步，并返回<code>target_speed</code> 和<code>target_location</code> 信息。</p><p>您要定义自己的行为规划算法。请在<code>opencda/customize/core/plan/</code> 文件夹下创建<code>behavior_agent.py</code>文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> carla.libcarla</span><br><span class="line"><span class="keyword">from</span> opencda.core.plan.behavior_agent <span class="keyword">import</span> BehaviorAgent</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomizedBehaviorAgent</span>(<span class="title class_ inherited__">BehaviorAgent</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, vehicle, carla_map, config_yaml</span>):</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_information</span>(<span class="params">self, ego_pos, ego_speed, objects</span>):</span><br><span class="line">        <span class="comment">########################################</span></span><br><span class="line">        <span class="comment"># this is where you put your algorithm #</span></span><br><span class="line">        <span class="comment">########################################</span></span><br><span class="line">        do_some_preprocessing(ego_pos, ego_speed, objects)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_step</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">########################################</span></span><br><span class="line">        <span class="comment"># this is where you put your algorithm #</span></span><br><span class="line">        <span class="comment">########################################</span></span><br><span class="line">        target_speed, target_loc = your_plan_algorithm()</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">type</span>(target_speed) == <span class="built_in">float</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">type</span>(target_loc) == carla.Location</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> target_speed, target_loc</span><br></pre></td></tr></table></figure><h2 id="Control-Customization"><a href="#Control-Customization" class="headerlink" title="Control Customization"></a><strong><strong>Control Customization</strong></strong></h2><p>和<code>BehaviorAgent, ControlManger</code>类似，首先通过<code>update_info()</code> 函数保存ego vehicle的位置信息，然后通过<code>run_step()</code> 获取<code>BehaviorAgent</code>生成的<code>target_speed</code> 和<code>target_loc</code> 信息，生成最终的指令。</p><p>与其他模块不同，ControlManager更像是一个抽象类，它提供了调用相应控制器（默认pid控制器）的接口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ControlManager</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, control_config</span>):</span><br><span class="line">        controller_type = control_config[<span class="string">&#x27;type&#x27;</span>]</span><br><span class="line">        controller = <span class="built_in">getattr</span>(</span><br><span class="line">            importlib.import_module(</span><br><span class="line">                <span class="string">&quot;opencda.core.actuation.%s&quot;</span> %</span><br><span class="line">                controller_type), <span class="string">&#x27;Controller&#x27;</span>)</span><br><span class="line">        self.controller = controller(control_config[<span class="string">&#x27;args&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_info</span>(<span class="params">self, ego_pos, ego_speed</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Update ego vehicle information for controller.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.controller.update_info(ego_pos, ego_speed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_step</span>(<span class="params">self, target_speed, target_loc</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Execute current controller step.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        control_command = self.controller.run_step(target_speed, waypoint)</span><br><span class="line">        <span class="keyword">return</span> control_command</span><br></pre></td></tr></table></figure><p>因此，如果你想使用 pid 控制器以外的控制器，你可以在 <code>opencda/core/acutation/</code>文件夹下创建<code>customize_controller.py</code>，并遵循相同的输入和输出数据格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomizeController</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_info</span>(<span class="params">self, ego_pos, ego_spd</span>):</span><br><span class="line">        <span class="comment">########################################</span></span><br><span class="line">        <span class="comment"># this is where you put your algorithm #</span></span><br><span class="line">        <span class="comment">########################################</span></span><br><span class="line">        do_some_process(ego_pos, ego_spd)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_step</span>(<span class="params">self, target_speed, target_loc</span>):</span><br><span class="line">        <span class="comment">########################################</span></span><br><span class="line">        <span class="comment"># this is where you put your algorithm #</span></span><br><span class="line">        <span class="comment">########################################</span></span><br><span class="line">        control_command = control(target_speed, target_loc)</span><br><span class="line">        <span class="keyword">assert</span> control_command == carla.libcarla.VehicleControl</span><br><span class="line">        <span class="keyword">return</span> control_command</span><br></pre></td></tr></table></figure><p>然后将控制器的名称放入 yaml 文件中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vehicle_base:</span></span><br><span class="line">    <span class="attr">controller:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">customize_controller</span> <span class="comment"># this has to be exactly the same name as the controller py file</span></span><br><span class="line">        <span class="attr">args:</span> <span class="string">......</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;定制化&quot;&gt;&lt;a href=&quot;#定制化&quot; class=&quot;headerlink&quot; title=&quot;定制化&quot;&gt;&lt;/a&gt;定制化&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploa</summary>
      
    
    
    
    <category term="selfdriving" scheme="https://wangxso.github.io/categories/selfdriving/"/>
    
    
  </entry>
  
  <entry>
    <title>zlib 404</title>
    <link href="https://wangxso.github.io/2023/08/01/zlib%20404/"/>
    <id>https://wangxso.github.io/2023/08/01/zlib%20404/</id>
    <published>2023-08-01T00:45:31.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/apollo/.cache/bazel/540135163923dd7d5820f3ee4b306b32/external/rules_proto/proto/private/dependencies.bzl</span><br></pre></td></tr></table></figure><p>查看输出，发现所需文件“zlib-1.2.11.tar.gz” 的预期的哈希值与实际的哈希值不匹配，这可能表示下载的文件与预期的文件不同或文件可能已被篡改。</p><p>新的下载链接<br><a href="https://zlib.net/fossils/zlib-1.2.11.tar.gz">https://zlib.net/fossils/zlib-1.2.11.tar.gz</a></p><p>&#x2F;apollo&#x2F;.cache&#x2F;bazel&#x2F;540135163923dd7d5820f3ee4b306b32&#x2F;external&#x2F;rules_proto&#x2F;proto&#x2F;private</p><p>目录下面的<br>dependencies.bzl</p><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/08/4096377460.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla</summary>
      
    
    
    
    <category term="zczb" scheme="https://wangxso.github.io/categories/zczb/"/>
    
    
  </entry>
  
  <entry>
    <title>V2X场景发展和仿真</title>
    <link href="https://wangxso.github.io/2023/07/19/V2X%E5%9C%BA%E6%99%AF%E5%8F%91%E5%B1%95%E5%92%8C%E4%BB%BF%E7%9C%9F/"/>
    <id>https://wangxso.github.io/2023/07/19/V2X%E5%9C%BA%E6%99%AF%E5%8F%91%E5%B1%95%E5%92%8C%E4%BB%BF%E7%9C%9F/</id>
    <published>2023-07-19T00:09:00.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V2X调研"><a href="#V2X调研" class="headerlink" title="V2X调研"></a>V2X调研</h1><h1 id="一、Use-Case"><a href="#一、Use-Case" class="headerlink" title="一、Use Case"></a>一、Use Case</h1><h2 id="1-用例分类"><a href="#1-用例分类" class="headerlink" title="1. 用例分类"></a>1. 用例分类</h2><p>国汽车工程学会团体标准《协同智能交通系统；车辆通讯；应用层规范和数据交换标准”（T&#x2F;CSAE 53-2017），定义了基于车路协同应用功能的17个典型应用场景，分为安全类、效率类和信息服务类，并发布了第二版第二阶段标准（T&#x2F;CSAE 53-2020）在此基础上，针对安全、效率、信息服务、交通管理、先进智能驾驶等领域新增12个典型应用场景。欧洲电信标准化协会（ETSI）定义了52个车路协同应用场景，涵盖道路安全、交通效率等方面。第三代合作伙伴计划（3GPP）定义了27个基于LTE-V2X的应用场景（3GPP TR22.885）和25个基于5G-V2X的应用场景（3GPP TR22.886）</p><p>Day1和Day2是指V2X（Vehicle-to-Everything）技术的应用场景分类。</p><p><strong>Day 1 Use Cases</strong>是指V2X技术的最初应用场景，主要是车辆安全和交通管理。这些应用场景包括：</p><ul><li><p>前方障碍物预警</p></li><li><p>侧后方碰撞预警</p></li><li><p>交叉口危险提示</p></li><li><p>交通信号优化</p></li><li><p>交通流量管理</p></li><li><p>车道交替提示<br><strong><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/07/2573423467.png"></strong><br><strong>Day 2 Use Cases</strong>是指V2X技术更加成熟后的应用场景，主要是车辆自主驾驶和智能交通管理。这些应用场景包括：</p></li><li><p>自动泊车</p></li><li><p>自动跟车</p></li><li><p>自动超车</p></li><li><p>智能路况预测</p></li><li><p>智能车辆调度</p></li><li><p>智能交通调度</p></li></ul><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/07/285280660.png"></p><h2 id="2-Day-1-和-Day-2-以外的场景"><a href="#2-Day-1-和-Day-2-以外的场景" class="headerlink" title="2.Day 1 和 Day 2 以外的场景"></a><a href="http://2.day/">2.Day</a> 1 和 Day 2 以外的场景</h2><h3 id="1-高速公路车道线协调-day2"><a href="#1-高速公路车道线协调-day2" class="headerlink" title="(1) 高速公路车道线协调(day2?)"></a>(1) 高速公路车道线协调(day2?)</h3><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/07/834551859.png"></p><p>V2P的场景</p><p>V2P通过手机、智能穿戴设备（智能手表等）等实现车与行人信号交互，在根据车与人之间速度、位置等信号判断有一定的碰撞隐患时，车辆通过仪表及蜂鸣器，手机通过图像及声音提示注意前方车辆或行人。</p><p><strong>1）道路行人预警</strong></p><p>行人穿越道路时，道路行驶车辆与人进行信号交互，当检测到具有碰撞隐患时，车辆会收到图片和声音提示驾驶员，同样行人收到手机屏幕图像或声音提示，这项技术非常实用，因为目前手机“低头党”非常多，过马路时经常有人只顾盯着手机屏幕，无暇顾及周边环境。</p><p><strong>2）倒车预警</strong></p><p>行人经过正在经过倒车出库的汽车时，由于驾驶员视觉盲区未能及时发现周边的人群（尤其是玩耍的儿童），很容易发生交通事故，这与借助全景影像进行泊车功能类似。</p><h3 id="2-远程驾驶"><a href="#2-远程驾驶" class="headerlink" title="(2) 远程驾驶"></a>(2) 远程驾驶</h3><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/07/3218185360.png"></p><p>用户或者云计算服务器通过V2N的网络控制车辆自动驾驶。</p><h3 id="3-通过V2X优先紧急车辆的智能交通灯控制"><a href="#3-通过V2X优先紧急车辆的智能交通灯控制" class="headerlink" title="(3) 通过V2X优先紧急车辆的智能交通灯控制"></a>(3) 通过V2X优先紧急车辆的智能交通灯控制</h3><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/07/143835845.png"></p><p>当交通灯系统被黑客攻击时,论文提出的应对措施主要包括:</p><ol><li>使用VANET网络使车辆之间进行实时通讯和信息共享,形成去中心化的交通管理,不完全依赖易受攻击的中心化交通控制系统。</li><li>利用车载传感器和摄像头等设备检测交通状态,点对点地协调交通,降低对交通信号灯的依赖。</li><li>紧急车辆(如救护车)通过车对车(V2V)通信广播优先级消息,要求其他车辆让行。其他车辆接收到后,自动让行或跟随紧急车辆通过。</li><li>通过车载GPS和数字地图, Calculates 最优路径供紧急车辆导航,无需依赖交通信号指令。</li><li>利用边缘计算服务器协助车辆运算和协调,减轻对车载计算能力的依赖。</li><li>警察和政府部门利用管理平台对交通状态进行监控和协调,发布交通指令控制特定地点的车流。</li><li>在发生攻击时,向司机发出警告,要求人工驾驶待交通系统恢复。</li></ol><h3 id="4-智能安防"><a href="#4-智能安防" class="headerlink" title="(4) 智能安防"></a>(4) 智能安防</h3><p>智能安防则是目前汽车领域的一个热点，通过V2X<a href="https://www.qxwz.com/solutions/autovehicle">车路协同</a>系统可以实现车辆和周围环境的实时监控和预警，提高车辆的安全性和防盗性。</p><h1 id="二、相关仿真"><a href="#二、相关仿真" class="headerlink" title="二、相关仿真"></a>二、相关仿真</h1><h3 id="⭐️‣"><a href="#⭐️‣" class="headerlink" title="⭐️‣"></a>⭐️‣</h3><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/07/999851822.png"></p><p><strong>仿真工具</strong></p><p>仿真工具中的功能模块具备以下特点：</p><ol><li>基础功能完善。该平台由Sumo与Carla联合搭建，包含了完善自动驾驶功能模块，如3D环境模块、交通流模块、传感器模块等。</li><li>可拓展性强。用户可以依据自己的需求来使用OpenCDA平台。比如只是单纯了解交通性能，在Sumo上就可以完成；但假如在多车协同自动驾驶的基础上还要进一步了解通信模型，那么继续集成ns-3等工具也是可以的。</li></ol><p><strong><strong>合作驾驶系统</strong></strong></p><p>合作驾驶系统中的算法具备以下特点：</p><ol><li>基础算法完善。OpenCDA平台包含了自动驾驶大脑的感知、规划、控制等算法。</li><li>多车协同算法集成。OpenCDA平台额外添加了一个应用层，主要用于实施多辆自动驾驶车的协同行为。具体算法包括多车协同感知、协同定位、车辆编队等。</li><li>模块化。上述所有模块都附带默认算法或协议，用户只需要一行代码即可在不影响其他部分的情况下，用自定义的算法或协议来替换默认设置。从而比较和评估算法性能。</li></ol><p><strong><strong>场景管理器</strong></strong></p><p>场景管理具备以下模块：</p><ol><li>场景配置文件。OpenCDA在该部分中分为两个软件的场景定义。Carla中静态元素由xdor文件定义，Sumo中动态元素由yaml文件定义。</li><li>场景初始化器。加载上述场景文件后，可以构建仿真环境、指导动态交通行为。</li><li>评估函数。当仿真结束后，OpenCDA会分别从Carla的驾驶层级与Sumo的交通层级来分别做出评价。</li></ol><p><strong>运行逻辑</strong></p><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/07/1836118110.png"></p><ol><li>用户需要根据 OpenCDA 提供的模板创建 yaml 文件来配置 CARLA 服务器的设置（例如同步模式与异步模式）、流量规格（例如数量）人类驾驶车辆的数量、生成位置）以及每个联网自动车辆的参数（例如，传感器参数、检测模型选择、目标速度）</li><li>构建场景（仅限CARLA）。如果模拟只需要CARLA模拟器，那么给出yaml文件后，场景管理器将加载该文件并通过opencda.sim_api构建场景。用户需要首先将yaml文件加载到字典中，并初始化ScenarioManager。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> opencda.scenario_testing.utils.sim_api <span class="keyword">as</span> sim_api</span><br><span class="line"></span><br><span class="line"><span class="comment"># Aad yaml file into a dictionary</span></span><br><span class="line">scenario_params = load_yaml(config_yaml)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create CAV world object to store all CAV VehicleManager info.</span></span><br><span class="line"><span class="comment"># this is the key element to achieve cooperation</span></span><br><span class="line">cav_world = CavWorld(opt.apply_ml)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create scenario manager</span></span><br><span class="line">scenario_manager = sim_api.ScenarioManager(scenario_params,</span><br><span class="line">                                           opt.apply_ml,</span><br><span class="line">                                           town=<span class="string">&#x27;Town06&#x27;</span>,</span><br><span class="line">                                           cav_world=cav_world</span><br></pre></td></tr></table></figure><p>之后，将生成排和单个 CAV。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create a list of platoon</span></span><br><span class="line">platoon_list = scenario_manager.create_platoon_manager(</span><br><span class="line">        map_helper=map_api.spawn_helper_2lanefree,</span><br><span class="line">        data_dump=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a list of single CAV</span></span><br><span class="line">single_cav_list = scenario_manager.create_vehicle_manager(application=[<span class="string">&#x27;single&#x27;</span>])</span><br></pre></td></tr></table></figure><p>接下来，产生交通流。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create background traffic under Carla</span></span><br><span class="line">traffic_manager, bg_veh_list = scenario_manager.create_traffic_carla()</span><br></pre></td></tr></table></figure><p>最后，创建EvaluationManager</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> opencda.scenario_testing.evaluations.evaluate_manager <span class="keyword">import</span> EvaluationManager</span><br><span class="line">eval_manager = \</span><br><span class="line">    EvaluationManager(scenario_manager.cav_world,</span><br><span class="line">                      script_name=<span class="string">&#x27;platoon_joining_town06_carla&#x27;</span>,</span><br><span class="line">                      current_time=scenario_params[<span class="string">&#x27;current_time&#x27;</span>])</span><br></pre></td></tr></table></figure><ol><li>构建场景（联合仿真）在联合仿真设置下构建场景与仅在 CARLA 中构建场景非常相似。只有两个区别：1）联合仿真需要额外的 Sumo 文件。 2）不使用ScenarioManager，而是使用CoScenarioManager来控制流量。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> opencda.scenario_testing.utils.cosim_api <span class="keyword">as</span> sim_api</span><br><span class="line"></span><br><span class="line"><span class="comment"># there should be a Town06.sumocfg, a Town06.net.xml, and a Town06.rou.xml in</span></span><br><span class="line"><span class="comment"># Town06 folder</span></span><br><span class="line">sumo_cfg = <span class="string">&#x27;Town06&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create co-simulation scenario manager</span></span><br><span class="line">scenario_manager = \</span><br><span class="line">    sim_api.CoScenarioManager(scenario_params,</span><br><span class="line">                              opt.apply_ml,</span><br><span class="line">                               town=<span class="string">&#x27;Town06&#x27;</span>,</span><br><span class="line">                              cav_world=cav_world,</span><br><span class="line">                              sumo_file_parent_path=sumo_cfg)</span><br></pre></td></tr></table></figure><ol><li>单步运行</li><li>保持模拟循环运行</li><li>评估</li></ol><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p><strong>合作驾驶测试</strong></p><ol><li>合并进入队伍</li></ol><p><img src="https://opencda-documentation.readthedocs.io/en/latest/_images/platoon_joining_2lanefree.gif" alt="https://opencda-documentation.readthedocs.io/en/latest/_images/platoon_joining_2lanefree.gif"></p><ol><li>合并进入队伍与SUMO联合仿真</li></ol><p><img src="https://opencda-documentation.readthedocs.io/en/latest/_images/platoon_joining_cosim.gif" alt="https://opencda-documentation.readthedocs.io/en/latest/_images/platoon_joining_cosim.gif"></p><ol><li>合并后入列</li></ol><p><img src="https://opencda-documentation.readthedocs.io/en/latest/_images/platoon_joining_town06.gif" alt="https://opencda-documentation.readthedocs.io/en/latest/_images/platoon_joining_town06.gif"></p><h3 id="https-github-com-ai4ce-V2X-Sim"><a href="#https-github-com-ai4ce-V2X-Sim" class="headerlink" title="https://github.com/ai4ce/V2X-Sim"></a><a href="https://github.com/ai4ce/V2X-Sim">https://github.com/ai4ce/V2X-Sim</a></h3><p>一个智能驾驶协作感知数据集。采用SUMO生成真实的数字交通流，采用CARLA从多辆车和路边单元检索数据流。</p><p>V2X-Sim是vehicle-to-everythingsimulation的缩写，是纽约大学AI4CE实验室和上海交通大学MediaBrain团队开发的第一个合成的V2X辅助自动驾驶协作感知数据集，旨在促进多智能体多模态多任务感知研究 。 由于 V2X 的不成熟以及同时运行多辆自动驾驶汽车的成本，为研究社区构建这样一个真实世界的数据集非常昂贵且费力。 因此，我们使用高度真实的 CARLA-SUMO 联合仿真来确保我们的数据集与真实驾驶场景相比的代表性。</p><p>V2X-Sim 提供：(1) 来自路边单元 (RSU) 和多辆车辆的良好同步传感器记录，支持多智能体感知；(2) 多模态传感器流，促进多模态感知；(3) 各种经过良好注释的基本事实，支持各种感知任务，包括检测、跟踪和分割。 同时，我们构建了一个开源测试平台，并为检测、跟踪和分割等三个任务上最先进的协作感知算法提供了基准。</p><h3 id="https-github-com-hangqiu-AutoCastSim"><a href="#https-github-com-hangqiu-AutoCastSim" class="headerlink" title="https://github.com/hangqiu/AutoCastSim"></a><a href="https://github.com/hangqiu/AutoCastSim">https://github.com/hangqiu/AutoCastSim</a></h3><p>AutoCastSim 是一个端到端的协同感知和协同驾驶仿真框架。它建立在 CARLA 模拟器之上，使用车辆-车辆(V2V)通信，以实现传感器共享和车辆协作。AutoCastSim 的一个特性是，它包含针对长尾事件的设计场景，在这些事件中，基于单一车辆的解决方案无法始终如一地做出安全决策。</p><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/07/600110548.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;V2X调研&quot;&gt;&lt;a href=&quot;#V2X调研&quot; class=&quot;headerlink&quot; title=&quot;V2X调研&quot;&gt;&lt;/a&gt;V2X调研&lt;/h1&gt;&lt;h1 id=&quot;一、Use-Case&quot;&gt;&lt;a href=&quot;#一、Use-Case&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="selfdriving" scheme="https://wangxso.github.io/categories/selfdriving/"/>
    
    
  </entry>
  
  <entry>
    <title>K8S的GPU调度</title>
    <link href="https://wangxso.github.io/2023/07/12/K8S%E7%9A%84GPU%E8%B0%83%E5%BA%A6/"/>
    <id>https://wangxso.github.io/2023/07/12/K8S%E7%9A%84GPU%E8%B0%83%E5%BA%A6/</id>
    <published>2023-07-11T23:08:25.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="K8S的GPU调度"><a href="#K8S的GPU调度" class="headerlink" title="K8S的GPU调度"></a>K8S的GPU调度</h1><p>环境要求: Kubernetes v1.26 [stable]</p><p>Kubernetes可以通过设备插件来稳定的管理你的集群不同节点之间的AMD和Nvidia的图像处理单元。</p><p>本章会展示用户如何使用GPU并且概述了其中的一些限制。</p><h2 id="使用设备插件"><a href="#使用设备插件" class="headerlink" title="使用设备插件"></a>使用设备插件</h2><p>Kubernetes 实现了设备插件，允许 Pods(Pods是K8S中可以创建和管理的最小的可部署计算单元)访问专门的硬件特性，如 GPUs。</p><p>首先作为管理员，你应该先给GPU装上相关公司提供的驱动程序和运行相应的设备插件程序，下面有几个主流公司的设备插件程序地址:</p><p>AMD: </p><p><a href="https://intel.github.io/intel-device-plugins-for-kubernetes/cmd/gpu_plugin/README.html">Intel GPU device plugin for Kubernetes — Intel® Device Plugins for Kubernetes  documentation</a></p><p><a href="https://github.com/RadeonOpenCompute/k8s-device-plugin#deployment">GitHub - RadeonOpenCompute&#x2F;k8s-device-plugin: Kubernetes (k8s) device plugin to enable registration of AMD GPU to a container cluster</a></p><p><a href="https://github.com/NVIDIA/k8s-device-plugin#quick-start">GitHub - NVIDIA&#x2F;k8s-device-plugin: NVIDIA device plugin for Kubernetes</a></p><p>如果你安装了相应的插件，你的集群会暴露出一个可定制的调度资源比如<code>amd.com/gpu</code> 和</p><p><code>[nvidia.com/gpu](http://nvidia.com/gpu)</code> 。</p><p>通过自定义的GPU资源，你可以从容器中使用这些GPU，就像你请求CPU和内存资源的方式一样。</p><p>然后在如何自定义设备的制定需求的时候有一些限制。</p><p>GPU只能在限制下被指定，这意味着：</p><ul><li>你可以在不指定请求的情况下指定GPU的限制。因为默认情况下k8s会将这个限制作为对请求的默认限制。</li><li>你可以指定对请求的限制的同时也可以设置对GPU的限制，但是这两个值必须相等。</li><li>你不能再没有指定GPU限制的情况下也不设置请求的限制。</li></ul><p>下面是一个有关Pod请求GPU的清单示例:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example-vector-add</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">example-vector-add</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">&quot;registry.example/example-vector-add:v42&quot;</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">gpu-vendor.example/example-gpu:</span> <span class="number">1</span> <span class="comment"># requesting 1 GPU</span></span><br></pre></td></tr></table></figure><h2 id="包含不同类型-GPU-的集群"><a href="#包含不同类型-GPU-的集群" class="headerlink" title="包含不同类型 GPU 的集群"></a>包含不同类型 GPU 的集群</h2><p>如果集群中的不同节点具有不同类型的 GPU，那么可以使用节点标签和节点选择器将 pods 调度到适当的节点。</p><p>比如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Label your nodes with the accelerator type they have.</span></span><br><span class="line">kubectl label nodes node1 accelerator=example-gpu-x100</span><br><span class="line">kubectl label nodes node2 accelerator=other-gpu-k915</span><br></pre></td></tr></table></figure><p>标签键的accelerator只是一个例子; 如果愿意，可以使用不同的标签键。</p><h2 id="自动节点标记"><a href="#自动节点标记" class="headerlink" title="自动节点标记"></a>自动节点标记</h2><p>如果你使用的是 AMD GPU 设备，则可以部署节点标签器。节点标签器是一个控制器，自动标记你的节点中的GPU 设备属性。</p><hr><p>NVIDIA 的类似功能由 <a href="https://github.com/NVIDIA/gpu-feature-discovery/blob/main/README.md">GPU feature discovery</a>提供。</p><p>reference: <a href="https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus/">https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;K8S的GPU调度&quot;&gt;&lt;a href=&quot;#K8S的GPU调度&quot; class=&quot;headerlink&quot; title=&quot;K8S的GPU调度&quot;&gt;&lt;/a&gt;K8S的GPU调度&lt;/h1&gt;&lt;p&gt;环境要求: Kubernetes v1.26 [stable]&lt;/p&gt;
&lt;p&gt;Kub</summary>
      
    
    
    
    <category term="bxjs" scheme="https://wangxso.github.io/categories/bxjs/"/>
    
    
  </entry>
  
  <entry>
    <title>关于Carla两三点事</title>
    <link href="https://wangxso.github.io/2023/07/11/%E5%85%B3%E4%BA%8ECarla%E4%B8%A4%E4%B8%89%E7%82%B9%E4%BA%8B/"/>
    <id>https://wangxso.github.io/2023/07/11/%E5%85%B3%E4%BA%8ECarla%E4%B8%A4%E4%B8%89%E7%82%B9%E4%BA%8B/</id>
    <published>2023-07-11T06:48:00.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Carla"><a href="#Carla" class="headerlink" title="Carla"></a>Carla</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>CARLA 是开源的自动驾驶仿真器。他是从零开始构建的，通过模块化和灵活的API来解决一系列与自动驾驶相关的任务。CARLA基于虚幻引擎构建仿真环境，使用OpenDRIVE规范来定义道路和城市环境。对于仿真的控制是通过Python或C++调用API来控制的，随着项目的开发这样的API会越来越多。</p><h3 id="仿真器"><a href="#仿真器" class="headerlink" title="仿真器"></a>仿真器</h3><p>CARLA由一个可伸缩的主从架构组成。</p><p>服务端负责所有与模型相关的东西，包括传感器渲染，物理学的计算，世界状态和行为的更新等。</p><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><ol><li><p>Ubuntu 22.04 由于clang11的原因无法安装Carla。</p></li><li><p><a href="https://github.com/carla-simulator/carla/issues/6381%E8%AF%A5issue%E6%8F%90%E5%88%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E6%97%A0%E6%95%88%EF%BC%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%E3%80%82">https://github.com/carla-simulator/carla/issues/6381该issue提到的解决方法无效，客户端无法运行。</a></p></li><li><p>Carla很大注意预留好硬盘空间，大概需要100G左右</p></li><li><p>cannot find -lstdc++<br>今天重新搞carla的时候遇到了这个问题。先说如何解决:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang++ --verbose</span><br></pre></td></tr></table></figure><p>可以看到如下的输出:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">clang version 10.0.0-4ubuntu1 </span><br><span class="line">Target: x86_64-pc-linux-gnu</span><br><span class="line">Thread model: posix</span><br><span class="line">InstalledDir: /usr/bin</span><br><span class="line">Found candidate GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/10</span><br><span class="line">......</span><br><span class="line">Selected GCC installation:  /usr/bin/../lib/gcc/x86_64-linux-gnu/13</span><br><span class="line">Candidate multilib: .;@m64</span><br><span class="line">Selected multilib: .;@m64</span><br></pre></td></tr></table></figure><p><strong>Select GCC XXXXXXXXX u&#x2F;13</strong></p></li></ol><p>看到这个数字13了把，你就安装对应版本的libstdc++，如下所示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libstdc++-13-dev</span><br></pre></td></tr></table></figure><hr><p>分割线，等我想更新了再写</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Carla&quot;&gt;&lt;a href=&quot;#Carla&quot; class=&quot;headerlink&quot; title=&quot;Carla&quot;&gt;&lt;/a&gt;Carla&lt;/h1&gt;&lt;h2 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍</summary>
      
    
    
    
    <category term="selfdriving" scheme="https://wangxso.github.io/categories/selfdriving/"/>
    
    
  </entry>
  
  <entry>
    <title>ROS2装尝试</title>
    <link href="https://wangxso.github.io/2023/07/07/ROS2%E8%A3%85%E5%B0%9D%E8%AF%95/"/>
    <id>https://wangxso.github.io/2023/07/07/ROS2%E8%A3%85%E5%B0%9D%E8%AF%95/</id>
    <published>2023-07-07T00:07:00.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ROS2"><a href="#ROS2" class="headerlink" title="ROS2"></a>ROS2</h1><ol><li><p><del>关闭SIP</del></p><ol><li><del>关机</del></li><li><del>按住开机键10秒，知道出现选择启动项界面，选择设置</del></li><li><del>选择终端</del></li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrutil <span class="built_in">disable</span></span><br></pre></td></tr></table></figure><p> <del>然后重启电脑即可。</del> </p></li><li><p><del>M1的Macbook Air下的MacOS 13.4.1 Venture版本出现错误, 执行</del> </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colcon build --symlink-install --packages-skip-by-dep python_qt_binding</span><br></pre></td></tr></table></figure><p>   <del>发生了错误</del></p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--- stderr: rviz_ogre_vendor</span><br><span class="line">In file included from /Users/wangxs/ros2_iron/build/rviz_ogre_vendor/ogre-v1.12.10-prefix/src/ogre-v1.12.10/OgreMain/src/OgreASTCCodec.cpp:29:</span><br><span class="line">In file included from /Users/wangxs/ros2_iron/build/rviz_ogre_vendor/ogre-v1.12.10-prefix/src/ogre-v1.12.10/OgreMain/src/OgreStableHeaders.h:45:</span><br><span class="line">In file included from /Users/wangxs/ros2_iron/build/rviz_ogre_vendor/ogre-v1.12.10-prefix/src/ogre-v1.12.10/OgreMain/include/OgrePrerequisites.h:35:</span><br><span class="line">/Users/wangxs/ros2_iron/build/rviz_ogre_vendor/ogre-v1.12.10-prefix/src/ogre-v1.12.10/OgreMain/include/OgrePlatform.h:183:13: fatal error: <span class="string">&#x27;Availability.h&#x27;</span> file not found</span><br><span class="line"><span class="comment">#   include &quot;Availability.h&quot;</span></span><br><span class="line">            ^~~~~~~~~~~~~~~~</span><br><span class="line">1 error generated.</span><br></pre></td></tr></table></figure><p><del>我在网上搜了原因和解决方法都无果，比如</del></p><p><a href="https://github.com/ros2/ros2/issues/948">https://github.com/ros2/ros2/issues/948</a></p><p><del>我的猜想可能跟xcode版本有关，旧版本的xcode可能会带有该头文件，并且可能我的版本太新了导致的，随即不折腾了</del>。</p><ol><li>Docker启动(曲线救国)<ol><li><p>拉取Ubuntu22.04镜像</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu:22.04</span><br></pre></td></tr></table></figure></li><li><p>运行容器 </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name ubuntu-test -v /yourpath:/mnt ubuntu:22.04 </span><br></pre></td></tr></table></figure></li><li><p>运行命令进入容器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ubuntu-test /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>根据ros2文档进行安装</p><p> <a href="https://docs.ros.org/en/iron/Installation/Alternatives/Ubuntu-Development-Setup.html#">ROS2 Installation For Ubuntu</a></p></li></ol></li></ol><p>遇到了坑点，因为docker没有图形界面，所以导致turtlesim的样例无法启动。解决办法还是有的就是想我之前安装<strong>mininet</strong>一样。</p><p><a href="https://blog.wangx.wang/index.php/archives/181/">如何让mininet在M1系列的Macbook上运行？ - Wangxs的博客</a></p><p>但是我这是虚拟机的解决方案？不会让我装在虚拟机里吧，emm。算了暂时不搞哪个样例了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ROS2&quot;&gt;&lt;a href=&quot;#ROS2&quot; class=&quot;headerlink&quot; title=&quot;ROS2&quot;&gt;&lt;/a&gt;ROS2&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;del&gt;关闭SIP&lt;/del&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;关机&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="selfdriving" scheme="https://wangxso.github.io/categories/selfdriving/"/>
    
    
  </entry>
  
  <entry>
    <title>Adobe Creative Cloud打开显示您没有管理应用程序的权限解决方案</title>
    <link href="https://wangxso.github.io/2023/03/05/Adobe%20Creative%20Cloud%E6%89%93%E5%BC%80%E6%98%BE%E7%A4%BA%E6%82%A8%E6%B2%A1%E6%9C%89%E7%AE%A1%E7%90%86%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9D%83%E9%99%90%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://wangxso.github.io/2023/03/05/Adobe%20Creative%20Cloud%E6%89%93%E5%BC%80%E6%98%BE%E7%A4%BA%E6%82%A8%E6%B2%A1%E6%9C%89%E7%AE%A1%E7%90%86%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9D%83%E9%99%90%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2023-03-05T04:57:00.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<p><strong>今天安装了Adobe Creative Cloud突然发现和前次在Mac上安装出现了一样的错误。所以就自己写个怎么解决的方案吧。</strong></p><p>原网站: <a href="https://www.mac69.com/news/2123.html">https://www.mac69.com/news/2123.html</a></p><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/03/4228446856.png"></p><h2 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h2><ul><li><p>点击访达【前往】【前往文件夹】，或者使用<br><code>shift+command+g</code>快捷键，如图：<br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/03/2917999684.png"></p></li><li><p>前往<code>/Library/Application Support/Adobe/OOBE/Configs/</code>路径，如图：<br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/03/2807200452.png"></p></li><li><p>找到<code>ServiceConfig.xml</code>文件，复制<code>ServiceConfig.xml</code>文件到桌面，使用文本编辑打开，如图：<br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/03/3609786159.png"></p></li><li><p>此时第一行<code>visiable</code>内容显示为<code>false</code>，如图：<br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/03/3435026113.png"></p></li><li><p>将<code>false</code>更改为<code>true</code>然后保存，如图：<br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/03/1880148662.png"><br>之后重新登录creative cloud账号即可正常使用！</p></li></ul><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><ul><li>打开资源管理器，在上方地址栏输入<code>C:\Program Files (x86)\Common Files\Adobe\OOBE\Configs</code></li></ul><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/03/3715890375.png"></p><ul><li>选择用记事本打开<code>ServiceConfig.xml</code>,此时visible的值为<code>false</code><br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/03/3696892130.png"></li><li>将它改为<code>true</code>保存<br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/03/1091517381.png"></li></ul><p>之后重新登录creative cloud账号即可正常使用！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;今天安装了Adobe Creative Cloud突然发现和前次在Mac上安装出现了一样的错误。所以就自己写个怎么解决的方案吧。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原网站: &lt;a href=&quot;https://www.mac69.com/news/2123.ht</summary>
      
    
    
    
    <category term="zczb" scheme="https://wangxso.github.io/categories/zczb/"/>
    
    
  </entry>
  
  <entry>
    <title>NasTool企业微信回调设置(新)</title>
    <link href="https://wangxso.github.io/2023/01/16/NasTool%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E5%9B%9E%E8%B0%83%E8%AE%BE%E7%BD%AE(%E6%96%B0)/"/>
    <id>https://wangxso.github.io/2023/01/16/NasTool%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E5%9B%9E%E8%B0%83%E8%AE%BE%E7%BD%AE(%E6%96%B0)/</id>
    <published>2023-01-15T20:22:00.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-创建企业微信应用"><a href="#1-创建企业微信应用" class="headerlink" title="1 创建企业微信应用"></a>1 创建企业微信应用</h1><ul><li>step1 进入链接<a href="https://work.weixin.qq.com/wework_admin/frame#apps">https://work.weixin.qq.com/wework_admin/frame#apps</a></li></ul><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/01/4227550833.png"></p><ul><li>step 2 输入相关信息</li></ul><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/01/3631833767.png"></p><ul><li>step3 记住AgentId和Secret</li></ul><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/01/2799206703.png"></p><ul><li>step4 获取企业ID</li></ul><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/01/2584071887.png"></p><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/01/31056227.png"></p><ul><li>step5 回到nastool填写信息</li></ul><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/01/3376161872.png"></p><blockquote><p>填写企业ID、Secret和应用ID，消息推送代理下面在填写</p></blockquote><h1 id="2-消息推送-回调设置"><a href="#2-消息推送-回调设置" class="headerlink" title="2. 消息推送&amp;回调设置"></a>2. 消息推送&amp;回调设置</h1><ul><li>点击进入</li></ul><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/01/1655452374.png"></p><ul><li>点击设置API</li></ul><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/01/525685936.png"></p><ul><li>设置API，这里先别保存，先把相关信息填到nastool里面点击保存后再点企业微信这边的保存，不然不通过的。<strong>注意第一个地址是你本机nastool所在的地址，并且你要有公网IP进行ddns或者你用反向代理FRP之类的也行。</strong></li></ul><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/01/2932680131.png"></p><ul><li><p>最后对于<strong>消息推送代理</strong>的设置，由于企业微信更新了规则，所以以前作者提供的代理服务器不行了，所以要自行搭建一下。</p><ul><li><p>找一台有公网IP的服务器，如云服务商的服务器，我用的是阿里云的。</p></li><li><p>如果你用的Nginx，那么就在你所对应网站的Nginx配置文件中加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /cgi-bin/gettoken &#123;</span><br><span class="line">  proxy_pass https://qyapi.weixin.qq.com;</span><br><span class="line">&#125;</span><br><span class="line">location /cgi-bin/message/send &#123;</span><br><span class="line">  proxy_pass https://qyapi.weixin.qq.com; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果你用的是Caddy搭建代理服务(（<code>&#123;upstream_hostport&#125;</code> 部分不是变量，不要改，原封不动复制粘贴过去即可）)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reverse_proxy https://qyapi.weixin.qq.com &#123;</span><br><span class="line">  header_up Host &#123;upstream_hostport&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后在你的nastool配置中的消息推送代理，填入你Nginx的地址如 <a href="http://nastool.example.com/">http://nastool.example.com</a> 即可</p></li></ul></li></ul><h1 id="3-配置微信菜单控制"><a href="#3-配置微信菜单控制" class="headerlink" title="3. 配置微信菜单控制"></a>3. 配置微信菜单控制</h1><ul><li>配置微信菜单控制 通过菜单远程控制工具运行，在<a href="https://work.weixin.qq.com/wework_admin/frame#apps">https://work.weixin.qq.com/wework_admin/frame#apps</a> 应用自定义菜单页面按如下图所示维护好菜单，菜单内容为发送消息，消息内容随意。<strong>一级菜单及一级菜单下的前几个子菜单顺序需要一模一样</strong>，在符合截图的示例项后可以自己增加别的二级菜单项。</li></ul><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/01/2959344127.png"></p><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2023/01/3174108928.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-创建企业微信应用&quot;&gt;&lt;a href=&quot;#1-创建企业微信应用&quot; class=&quot;headerlink&quot; title=&quot;1 创建企业微信应用&quot;&gt;&lt;/a&gt;1 创建企业微信应用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;step1 进入链接&lt;a href=&quot;https://work.</summary>
      
    
    
    
    <category term="zczb" scheme="https://wangxso.github.io/categories/zczb/"/>
    
    
  </entry>
  
  <entry>
    <title>2022年度总结</title>
    <link href="https://wangxso.github.io/2022/11/27/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://wangxso.github.io/2022/11/27/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</id>
    <published>2022-11-26T23:39:00.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="年度总结-魔幻、寒冬、焦虑"><a href="#年度总结-魔幻、寒冬、焦虑" class="headerlink" title="年度总结: 魔幻、寒冬、焦虑"></a><strong>年度总结: 魔幻、寒冬、焦虑</strong></h2><p>距离2022年结束的话还剩下不到40天的时间，最近被封控在寝室不由的胡思乱想，也借此来总结下这个魔幻的2022吧。</p><hr><h2 id="上半年-关键词：春招、平稳、幸运"><a href="#上半年-关键词：春招、平稳、幸运" class="headerlink" title="上半年-关键词：春招、平稳、幸运"></a>上半年-关键词：春招、平稳、幸运</h2><p>2022年上半年，这几个月在我的印象中还算平缓，没有发生什么逆天的魔幻事件。我从春节过完年回到学校就开始着手准备春招的事情。春招一开始也不算很顺利吧，但是能看到有许多的面试机会可以让我试。第一个面试跟我本科的时候一样还是熟悉的美团，还是熟悉的为难我。可能因为美团总是第一个面试所以导致我对于美团的面试体验感觉是最差的。然后后面接踵而来的就是OPPO和携程的面试，由于我一直以来对于拼多多的印象不是很好所以在OPPO和拼多多面试冲突的情况下拒绝了拼多多的面试。其中OPPO到了HR面，明显OPPO是魔幻的给我挂了，然后携程后面拿到了Offer。之后还有接着面百度和字节、阿里。其中百度到了二面挂了，字节后面拿到了Offer，阿里二面完后续因为HC冻结了导致流程推进不下去了。最后我选择了字节，也许在当时这是我心目中最好的公司了吧。总结下这上半年，就是四平八稳，心想事成，虽然中间经历了一些波折，但是最后结果是好的。</p><hr><h2 id="下半年-关键词：实习、魔幻、寒冬、秋招"><a href="#下半年-关键词：实习、魔幻、寒冬、秋招" class="headerlink" title="下半年-关键词：实习、魔幻、寒冬、秋招"></a>下半年-关键词：实习、魔幻、寒冬、秋招</h2><hr><h3 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h3><p>眼光来到下半年，大概在六月份的时候上海就开始了一系列的魔幻行为。导致那时候人们对于上海的印象开始直线下跌，由于我选择的base是在上海，所以那时对于能不能去上海，我是希望能不去最好别去，我的父母当然也是那么觉得的。但是我问当时对接的HR的时候，她说上海工区在慢慢恢复线下办公，所以让我最好还是去。我也听信了她的话，事后证明HR的话你最好别信。也正是此，我瞒着导师六月份离开了学校，先回家准备几天，在六月十五日正式到达上海，开始了我的第一次实习生活，当时的我充满了对于实习工作的热情和期待。由于我只是短租三个月由此，我的选择就不会很多，由于我懒得找房源所以选择了自如寓，由此就入住了自如寓，到达公司骑自行车只需要15分钟左右吧。住公寓的好处就是省心不用和房东掰扯什么，坏处就是商水商电。由于我的房间的空调是对着厕所的导致房间会很热，所以空调一天到晚不能停。由此我的电费大概一个月要四五百左右。很快时间到了六月十七日，我入职的时间，由于之前工作的电脑就寄到我手上了(锐评下当时发给我的Tinkbook 真的烂的一批，屏幕都不到720p)。然后那天就是远程入职，各种新人的培训和认识了我的leader东旭和我的mentor海潇，可以说我的第一次的实习就遇到两位很nice的领导和导师也算比较幸运的了。然后这天就是周五，我就比较轻松的度过了第一天(其实就是学下新人的课程和相关环境的配置)，海潇叫我下周一参加组里面的组会给大家介绍一下。第一次周会后，我就开始了golang的学习，因为之前接触过一点所以学起来还算比较轻松，经过一周的学习(虽然不需要一周，很快就基本掌握了)我就基本掌握了golang的语法和一些高级的特性。第二周，也是我第一次来到字节的漕河泾工区，那天早上我也不算很早就出发了，那时候我还是走路过去的(其实有点不是很熟悉，美其名曰锻炼身体)。然后我就接到了人生的第一个需求，开发一个对于超时的续费、退订订单的转人工兜底的系统。一开始的需求可以说还算是比较大的，并且当时让我一个人完成，当时的我觉得是没什么大问题是可以完成的。然后我就开始着手准备技术设计的文档从而参加技术评审。后面一周又有一个新人实习生加入了我们组，mentor就和我商量把这个需求拆分给他一部分，并且让我拆分的时候要保证两者能够并行的开发。由此我把需求拆分成了数据的采集和处理的一部分和后续与provider对接的一部分。然后这个需求经过后续的沟通修改了很大部分，直接把前台展示的部分直接删掉了，只保留很少的一部分，由此此前写的许多代码就没用了。后续也就是稀松平常的实习生活了，第一次上线、第一次出事故、第一次加班到凌晨、第一次团建、第一次转正答辩同时也收获了第一次转正答辩不通过。</p><p>这个实习让我收获了很多不管是对于人际的交流，还是技术上的储备。但是这次实习也让我失去了很多，比如抢占先机的秋招提前批、字节的秋招的机会等等。</p><h3 id="秋招"><a href="#秋招" class="headerlink" title="秋招"></a>秋招</h3><p>我的秋招是我在实习的时候就开始了的，大概是七月中下旬左右。那时候一开始我投了许多外企，当时我对字节的工作节奏感觉很不舒服，想要找找外企的机会。然后就是微软、intel、Nvidia之类的投了一遍，一开始没有什么音讯，到后来做了笔试后也没有相关的后续了。然后就到了八月我迎来了第一个面试，华为云的面试，当时我还是在公司上班，下午的时间我约了一个会议室，然后就开始面试了，虽然是第一个面试，但是经历过春招的洗礼后，我发现这种面试我开始变得从容自若。不出意外地第一轮的两场面试都通过了，然后后面就是主管面，由于一些我忘了的原因导致我后续上线完了一点造成了一些小尴尬，但是主管面顺利的通过了。后面陆陆续续的做了一些笔试如bilibili、米哈游之类的笔试，但是都是笔试后就没有后续了。然后九十月陆陆续续面了斗鱼、宁波银行、思格新能源、H3C、浙江电信、浙江移动，都没有很好的反馈。我的秋招真的可以说很难，我以为我有一段大厂的实习在我找正式工作的时候会有很大的帮助，可是结果是有许多的公司都把我的简历挂了。我的秋招到了现在还是没有一份offer，我有点迷茫了，不知道我为什么总是抓不住时代的机遇而总是被时代所埋葬的那一批人。2021年的春天，那是我一辈子最高兴的时候，是我考上武汉大学的研究生的时候，我不知道读这个研究生是对是错，但是从现在来看机遇不是站在我的这一边。10月份我回到学校，就感觉肚子不是很舒服，我就去查了肠镜，结肠炎。虽然已经查完了，但是我还是会怀疑自己是不是得了什么奇奇怪怪的病，有一些症状总会去套一些比较严重的病。我不知道从什么时候起，开始越来越害怕死亡、害怕我的人生还没起步就失去所有、害怕一辈子要和某些厄运作斗争。然后就是十一月开始，武汉的疫情形势越来越严峻，我也没想到有一天能够逃过上海的我，会在武汉被封在寝室里。由于没有找到工作所以我把宝压在了另一个赛道-考公上面，由于10月以来的不舒服导致我，10几乎没有复习过，因为我对华为还抱着一丝幻想，事实证明相信华为的话，那还不如想想怎么可控核聚变。11月初，我才开始准备浙江省的选调，而且还是那种三天打鱼两天晒网的，感觉我的竞争力不是很大。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>2022是魔幻的一年，互联网寒冬的一年。</strong></p><p><strong>时代洪流滚滚向前，而我不过是没有赶上潮头的沙粒。</strong></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2022/11/547942483.png" alt="字节实习offer"></h2><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2022/11/1413701665.png" alt="携程实习Offer"></p><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2022/11/2705386237.jpg" alt="漕河泾CBD"></p><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2022/11/4014374324.jpg" alt="工区的大厅"></p><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2022/11/901799145.jpg" alt="字节工牌"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;年度总结-魔幻、寒冬、焦虑&quot;&gt;&lt;a href=&quot;#年度总结-魔幻、寒冬、焦虑&quot; class=&quot;headerlink&quot; title=&quot;年度总结: 魔幻、寒冬、焦虑&quot;&gt;&lt;/a&gt;&lt;strong&gt;年度总结: 魔幻、寒冬、焦虑&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;距离2022年</summary>
      
    
    
    
    <category term="zczb" scheme="https://wangxso.github.io/categories/zczb/"/>
    
    
  </entry>
  
  <entry>
    <title>读《超级访谈：对话毕玄》有感</title>
    <link href="https://wangxso.github.io/2022/10/10/%E8%AF%BB%E3%80%8A%E8%B6%85%E7%BA%A7%E8%AE%BF%E8%B0%88%EF%BC%9A%E5%AF%B9%E8%AF%9D%E6%AF%95%E7%8E%84%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <id>https://wangxso.github.io/2022/10/10/%E8%AF%BB%E3%80%8A%E8%B6%85%E7%BA%A7%E8%AE%BF%E8%B0%88%EF%BC%9A%E5%AF%B9%E8%AF%9D%E6%AF%95%E7%8E%84%E3%80%8B%E6%9C%89%E6%84%9F/</id>
    <published>2022-10-10T04:07:00.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="读《超级访谈：对话毕玄》有感"><a href="#读《超级访谈：对话毕玄》有感" class="headerlink" title="读《超级访谈：对话毕玄》有感"></a>读《超级访谈：对话毕玄》有感</h1><p>推荐大家想看的可以读下，也可以作为休闲时候的播客听一听。</p><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2022/10/2527800353.png" alt="image-20221010195857654.png"></p><h2 id="听完一整篇毕玄的访谈，我的一个总结在于要想成为一个成功的程序员或者成功的人，最重要的还是吃到版本红利，当然实力也是很重要的，但是当达到一定的实力的时候，时运真的很重要。如果他没有经历那时候淘宝疯狂的增长时期，我觉得他甚至进不去阿里团队。也正是那会淘宝刚起步，才有许多的机会或者说锻炼的机会能够去试错，积累相关的技术经验。"><a href="#听完一整篇毕玄的访谈，我的一个总结在于要想成为一个成功的程序员或者成功的人，最重要的还是吃到版本红利，当然实力也是很重要的，但是当达到一定的实力的时候，时运真的很重要。如果他没有经历那时候淘宝疯狂的增长时期，我觉得他甚至进不去阿里团队。也正是那会淘宝刚起步，才有许多的机会或者说锻炼的机会能够去试错，积累相关的技术经验。" class="headerlink" title="听完一整篇毕玄的访谈，我的一个总结在于要想成为一个成功的程序员或者成功的人，最重要的还是吃到版本红利，当然实力也是很重要的，但是当达到一定的实力的时候，时运真的很重要。如果他没有经历那时候淘宝疯狂的增长时期，我觉得他甚至进不去阿里团队。也正是那会淘宝刚起步，才有许多的机会或者说锻炼的机会能够去试错，积累相关的技术经验。"></a>听完一整篇毕玄的访谈，我的一个总结在于要想成为一个成功的程序员或者成功的人，最重要的还是吃到版本红利，当然实力也是很重要的，但是当达到一定的实力的时候，时运真的很重要。如果他没有经历那时候淘宝疯狂的增长时期，我觉得他甚至进不去阿里团队。也正是那会淘宝刚起步，才有许多的机会或者说锻炼的机会能够去试错，积累相关的技术经验。</h2><h2 id="要成长为他一样的人，要做的就是选对赛道，能够规划好自己的路径"><a href="#要成长为他一样的人，要做的就是选对赛道，能够规划好自己的路径" class="headerlink" title="要成长为他一样的人，要做的就是选对赛道，能够规划好自己的路径"></a>要成长为他一样的人，要做的就是选对赛道，能够规划好自己的路径</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;读《超级访谈：对话毕玄》有感&quot;&gt;&lt;a href=&quot;#读《超级访谈：对话毕玄》有感&quot; class=&quot;headerlink&quot; title=&quot;读《超级访谈：对话毕玄》有感&quot;&gt;&lt;/a&gt;读《超级访谈：对话毕玄》有感&lt;/h1&gt;&lt;p&gt;推荐大家想看的可以读下，也可以作为休闲时候的</summary>
      
    
    
    
    <category term="Java" scheme="https://wangxso.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>【业务杂谈】幂等和防悬挂</title>
    <link href="https://wangxso.github.io/2022/08/07/%E3%80%90%E4%B8%9A%E5%8A%A1%E6%9D%82%E8%B0%88%E3%80%91%E5%B9%82%E7%AD%89%E5%92%8C%E9%98%B2%E6%82%AC%E6%8C%82/"/>
    <id>https://wangxso.github.io/2022/08/07/%E3%80%90%E4%B8%9A%E5%8A%A1%E6%9D%82%E8%B0%88%E3%80%91%E5%B9%82%E7%AD%89%E5%92%8C%E9%98%B2%E6%82%AC%E6%8C%82/</id>
    <published>2022-08-07T07:34:00.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="幂等和防悬挂"><a href="#幂等和防悬挂" class="headerlink" title="幂等和防悬挂"></a>幂等和防悬挂</h1><h2 id="一、什么是幂等"><a href="#一、什么是幂等" class="headerlink" title="一、什么是幂等"></a>一、什么是幂等</h2><p>先说结论，幂等就是让多次相同的请求有一致的结果。</p><p>我们做了一个幂等改造的需求，每次都会有人问我为什么要做这个，不用这个可以吗？我们想想看一个场景，我们购买一个ECS服务器，你购买之后商品系统就会发起一次交付，如果我们调用下游系统超时了(可能是因为<strong>网络传输丢包</strong>或者是<strong>返回结果丢失</strong>)，这个时候我们是否能重试呢？重试是否会多交付一台实例给用户呢？</p><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220807224930447.png" alt="image-20220807224930447"></p><p>当前我们的系统都是采用了微服务架构，系统和系统之间通信的方式无非几种：① RPC ② MQ ③ HTTP，对于<strong>远程调用</strong>会有三种状态：成功，失败或者超时。前两者都是很明确的状态，而超时是一个<strong>非常模糊</strong>的状态。因此我们做好幂等可以保证我们发起交付，在超时重试的过程中能够保证交付，不会让我们因为重试而交付了多台机器造成资源浪费。对于<strong>MQ</strong>而言，幂等可以保证让我们避免重复消费。<strong>HTTP</strong>同理。</p><h2 id="二、怎么设计幂等？"><a href="#二、怎么设计幂等？" class="headerlink" title="二、怎么设计幂等？"></a>二、怎么设计幂等？</h2><p>我们的幂等解决方案是利用数据库的写完成的，也是比较粗线条的解决方案吧。我们设计了一个幂等表。</p><table><thead><tr><th>名称</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int64</td><td>主键 自增</td></tr><tr><td>key</td><td>string</td><td>由幂等组和唯一标识的key，唯一索引</td></tr><tr><td>group</td><td>string</td><td>幂等组</td></tr><tr><td>sigture</td><td>String</td><td>方法签名，方法名和方法参数的md5值 唯一索引</td></tr></tbody></table><p>当能够从幂等表中写入的时候就是写幂等成功，写入失败的时候判断是否是唯一索引冲突，是就是入幂等失败。所以幂等需要一个唯一标识来表示，这个唯一标识可以利用<strong>雪花算法</strong>生成。</p><p>一般的幂等过程是这样的：</p><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220807230957082.png" alt="image-20220807230957082"></p><h2 id="三、防悬挂和防悬挂的实现"><a href="#三、防悬挂和防悬挂的实现" class="headerlink" title="三、防悬挂和防悬挂的实现"></a>三、防悬挂和防悬挂的实现</h2><p>防悬挂就是防止你撤销请求先至，创建请求后至，防止空回滚的策略。</p><p>他的大概过程是这样的：</p><h3 id="1-交付先至，撤销后至"><a href="#1-交付先至，撤销后至" class="headerlink" title="1. 交付先至，撤销后至"></a>1. 交付先至，撤销后至</h3><p> <img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220807232934677.png" alt="image-20220807232934677"></p><h3 id="2-撤销先至，交付后至"><a href="#2-撤销先至，交付后至" class="headerlink" title="2. 撤销先至，交付后至"></a>2. 撤销先至，交付后至</h3><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/img/image-20220807233155230.png" alt="image-20220807233155230"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;幂等和防悬挂&quot;&gt;&lt;a href=&quot;#幂等和防悬挂&quot; class=&quot;headerlink&quot; title=&quot;幂等和防悬挂&quot;&gt;&lt;/a&gt;幂等和防悬挂&lt;/h1&gt;&lt;h2 id=&quot;一、什么是幂等&quot;&gt;&lt;a href=&quot;#一、什么是幂等&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="zczb" scheme="https://wangxso.github.io/categories/zczb/"/>
    
    
  </entry>
  
  <entry>
    <title>【记录】挑战一个有趣的网站</title>
    <link href="https://wangxso.github.io/2022/07/23/%E3%80%90%E8%AE%B0%E5%BD%95%E3%80%91%E6%8C%91%E6%88%98%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <id>https://wangxso.github.io/2022/07/23/%E3%80%90%E8%AE%B0%E5%BD%95%E3%80%91%E6%8C%91%E6%88%98%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BD%91%E7%AB%99/</id>
    <published>2022-07-23T04:19:49.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="挑战一个有趣的网站"><a href="#挑战一个有趣的网站" class="headerlink" title="挑战一个有趣的网站"></a>挑战一个有趣的网站</h2><blockquote><p>这个网站源自热门视频：<a href="https://www.bilibili.com/video/BV17t4y157FZ">https://www.bilibili.com/video/BV17t4y157FZ</a></p></blockquote><p>我的思路一开始就是怎么绕过他的校验然后发送，但是当我看到他的js的时候，我发现这个网页对于小白来说可能很难，但是对于有丰富经验的前&#x2F;后端工程师来说就是小菜一碟了。</p><p>打开F12找到js源码，我们可以看到main.js这个文件，网站的主要逻辑就在这里面了。<br>大概你能在里面找到这样一段代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;https://service-9kivy954-1257138158.gz.apigw.tencentcs.com:443/updateNewUser&quot;</span>,</span><br><span class="line">                e,&#123;<span class="attr">headers</span>:&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>&#125;&#125;).<span class="title function_">then</span>((<span class="function"><span class="params">e</span>=&gt;</span>(<span class="variable language_">console</span>.<span class="title function_">log</span>(e),e))).<span class="title function_">catch</span>((<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">response</span>)&#125;))),</span><br><span class="line">                startPlayTime=performance.<span class="title function_">now</span>(),</span><br><span class="line">                final_html=<span class="string">&#x27;\n&lt;p class=&quot;announce&quot;&gt;....&quot;</span></span><br></pre></td></tr></table></figure><p>这样我TM直接发个post不就好了吗，于是我打开了postman</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Request Body</span><br><span class="line">username<span class="punctuation">:</span> <span class="string">&quot;wangxs&quot;</span></span><br><span class="line">password<span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">email<span class="punctuation">:</span> <span class="string">&quot;wangxs@whu.edu.cn&quot;</span></span><br><span class="line">age<span class="punctuation">:</span> <span class="string">&quot;23&quot;</span></span><br><span class="line">takenTime<span class="punctuation">:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2022/07/1459201755.png"><br>然后返回错误，可能是up主的腾讯云函数内存寄了。<br><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2022/07/3001353327.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;挑战一个有趣的网站&quot;&gt;&lt;a href=&quot;#挑战一个有趣的网站&quot; class=&quot;headerlink&quot; title=&quot;挑战一个有趣的网站&quot;&gt;&lt;/a&gt;挑战一个有趣的网站&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这个网站源自热门视频：&lt;a href=&quot;https://w</summary>
      
    
    
    
    <category term="zczb" scheme="https://wangxso.github.io/categories/zczb/"/>
    
    
  </entry>
  
  <entry>
    <title>什么是InfiniBand？</title>
    <link href="https://wangxso.github.io/2022/05/05/%E4%BB%80%E4%B9%88%E6%98%AFInfiniBand%EF%BC%9F/"/>
    <id>https://wangxso.github.io/2022/05/05/%E4%BB%80%E4%B9%88%E6%98%AFInfiniBand%EF%BC%9F/</id>
    <published>2022-05-05T02:14:00.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>简介</p><blockquote><p>InfiniBand是一种开放标准的高带宽，低时延，高可靠的网络互联技术。该技术由IBTA（InfiniBand Trade Alliance）定义推动在超级计算机集群领域广泛应用，同时，随着人工智能的兴起，也是GPU服务器首选的网络互联技术。目前，最新的InfiniBand产品为Mellanox生产的HDR，可以为网络提供端到端高达200Gbps的带宽，为高性能计算，人工智能等领域带来无与伦比的网络体验，最大程度释放集群内计算潜能。</p></blockquote></li><li><p>为什么我们需要InfiniBand？</p><ul><li><p>带宽高，400 Gb&#x2F;s 的超快的速度。下面展示了端口宽度分别为1X、2X、4X和12X。带宽在2018年中期达到600GB&#x2F;s的数据速率(HDR)和2020年的1.2TB&#x2F;S数据速率(NDR)。</p><p><img src="https://www.infinibandta.org/wp-content/uploads/2020/09/IBTA-roadmap-for-approval-18-07-12-7-01-800x480.jpg" alt="InfiniBand Roadmap"></p></li></ul></li></ul><p>图1 InfiniBand Roadmap</p><ul><li><p>低延迟，端到端延迟大概为1µs，因此大大加速了许多数据中心和高性能计算（HPC）应用程序。</p></li><li><p><img src="https://img-blog.csdnimg.cn/510c105f77314329b20626e7898dffb0.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbGVnZW5kMDUwNzA5Q29tZU9O,size_10,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p></li><li><p>更加高效，支持先进可靠的传输协议，比如RDMA(Remote Direct Memory Access)来提高作业的处理效率。</p></li><li><p>InfiniBand和以太网的区别？</p></li></ul><table><thead><tr><th></th><th>InfiniBand(12x)</th><th>万兆以太网</th></tr></thead><tbody><tr><td>带宽</td><td>168G,300G…</td><td>10G</td></tr><tr><td>延迟</td><td>小于等于1微秒</td><td>接近10微秒</td></tr><tr><td>应用领域</td><td>超级计算机、企业存储</td><td>互联网，城域网等</td></tr><tr><td>优点</td><td>低延迟，高带宽</td><td>应用范围广，已成为普遍认可的标准技术</td></tr><tr><td>缺点</td><td>硬件成本高</td><td>延迟难以进一步降低</td></tr></tbody></table><ul><li><p>基于IB的应用？</p><ul><li>RDMA</li><li>MPI</li><li>NVLink</li><li>UCX</li></ul></li></ul><h2 id="他所存在的不足？"><a href="#他所存在的不足？" class="headerlink" title="他所存在的不足？"></a>他所存在的不足？</h2><ul><li><p>拥塞控制问题</p><ul><li><p>Background</p><ul><li><p>采用基于信用的链路层流控</p></li><li><p>基于显式拥塞通告（Explicit Congestion Notification, ECN）的端到端拥塞控制技术。[^[1]]:曹光权,张子文,孙志刚,陈洪义,胥庆杰.基于ibdump的InfiniBand网络拥塞控制观测方法研究[J].计算机科学,2013,40(04):47-50.</p><p><strong>拥塞控制原理:</strong></p><p>从宏观角度来看，拥塞控制操作可以分为三步：</p><ul><li><p>第一步，①当交换机检测到拥塞发生，交换机会将IB数据包的BTH(Base Transport Header)中的FECN(Forward Explicit Congestion Notification)域置为1。</p></li><li><p>第二步，②当数据包到达目标HCA(Host Channel Adapter)   ③目标HCA会向源HCA返回带BECN(Backward Explicit Congestion Notification)标识的CNP(Congestion Notification Packet)</p></li></ul></li></ul></li></ul></li></ul><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2022/05/3278519870.png" alt="未命名文件.png"><br>图2 IB网络中的拥塞控制架构</p><ul><li>第三步，④当源HCA收到CNP, ⑤它会逐渐减少发送速率，从而减少拥塞随着时间的推移，源 HCA会逐渐恢复发送速率。<br>  lB网络的拥塞控制需要IB交换机 HCA都支持才能选择开启，IB交换机和HCA维持着有关拥塞控制的一系列参数，这些参数决定着交换机什么时候检测到拥塞 、以什么样的比率进行FECN标记、HCA降低发送速率的速度和时长， 如果这些参数进行了合理的设置，网络就会很好地解决拥塞问题 ，避免头堵塞 (head-of-lineblocking)，从而更充分利用网络资源。</li><li>Question<ul><li>定期更新的信用混淆了拥塞控制。</li><li>端到端IB CC缓慢的调整速率与快速的基于信用的逐跳流量控制不匹配。</li><li>Congestion-unaware rate increase contradicts with rate decrease.</li></ul></li></ul><h2 id="可能的解决方案"><a href="#可能的解决方案" class="headerlink" title="可能的解决方案"></a>可能的解决方案</h2><p>要做到更好的拥塞控制我认为应该实现以下的目标：</p><ul><li>准确的检测和识别拥塞流。</li><li>迅速的将拥塞流量降低到适当的速度，而不是逐步降低。</li></ul><p>解决方案：</p><p>一、接收者驱动的速率调节</p><p>在IB CC里面发送方QP通过每次接收到具有BECN比特集的数据包时移动固定的CCTI_Decrese来降低发送速率。逐步降低的速率缓慢，不能迅速消除拥塞。此外，CCT表中预配置和静态的IPD值并不能很好的适应不同的拥塞情况，由于不同的。</p><p>其典型拥塞情况可以分为三种：</p><ul><li>端点拥塞，瓶颈是到端点的访问链路。比如如图3，当流si同时向R2发送数据，Link a就成了瓶颈链路，这种拥堵在多对一传输模式中很常见。</li><li>网络中拥塞，瓶颈是结构内部的共享链接。当流f1和fm分别向R1和R2发送数据时，Link b就成了瓶颈链路。</li><li>同时多个拥堵点，这是最复杂的情况，通常出现在共享同一链路但瓶颈不同的流的情况下。 比如，当流fi(1&lt;&#x3D;i&lt;&#x3D;m-1)向R1和流fm和流si给R2发送数据的同时，他们的链路瓶颈不同经管他们都共享Link a。</li></ul><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2022/05/1036281080.png" alt="image-20220504160751068.png"></p><p>图3 典型的拥塞情况</p><p>二、接收者驱动的拥塞流的识别</p><p>在IB CC中交换机负责在检测拥塞时区分拥塞根端口。检测拥塞根端口的目的是识别实际的拥塞流，这些拥塞应该在限制速率的情况下进行。人们可能会认为，如果信用额度超过下限，那么可以安全地将一个端口视为拥塞根端口。但是信用的下限很大程度上取决于信用的更新频率和拥塞根端口的拥塞程度。</p><p>我们发现接收者拥有识别拥塞流的宝贵信息：对于拥塞流，所有数据包都至少通过一个拥塞根端口，经历了长时间排队，并且始终具有可用信用。而对于非阻塞流，没有任何数据包通过拥塞根端口。我们的解决方案是拥塞识别延迟到接收端， 它的优点是我们避免了深入研究交换机中的实现细节，同时也能够准确地识别拥塞流。</p><p>最终我们形成了如图4以接收者驱动的拥塞控制结构。</p><ul><li>拥塞检测(Congestion detection)</li><li>拥塞标记(Congestion marking)</li><li>拥塞识别(Congestion identification)</li><li>拥塞通知(Congestion notification)</li><li>速率调整(Rate regulation)</li></ul><p><img src="https://wangxblog.oss-cn-hangzhou.aliyuncs.com/usr/uploads/2022/05/833168377.png" alt="image-20220504154948228.png"></p><p>图4 接收者驱动的拥塞控制结构</p><hr><p>###参考文献</p><p>[1]曹光权,张子文,孙志刚,陈洪义,胥庆杰.基于ibdump的InfiniBand网络拥塞控制观测方法研究[J].计算机科学,2013,40(04):47-50.</p><p>[2]Zhang Y, Qian K, Ren F. Receiver-Driven Congestion Control for InfiniBand[C]&#x2F;&#x2F;50th International Conference on Parallel Processing. 2021: 1-10.</p><p>[3]Pfister G F. An introduction to the infiniband architecture[J]. High performance mass storage and parallel I&#x2F;O, 2001, 42(617-632): 102.</p><p>[4]Chu C H, Kousha P, Awan A A, et al. Nv-group: link-efficient reduction for distributed deep learning on modern dense gpu systems[C]&#x2F;&#x2F;Proceedings of the 34th ACM International Conference on Supercomputing. 2020: 1-12.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简介&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;InfiniBand是一种开放标准的高带宽，低时延，高可靠的网络互联技术。该技术由IBTA（InfiniBand Trade Alliance）定义推动在超级计算机集群领域广泛应用，同时，随着人工智能的兴起，也</summary>
      
    
    
    
    <category term="bxjs" scheme="https://wangxso.github.io/categories/bxjs/"/>
    
    
  </entry>
  
  <entry>
    <title>如何让mininet在M1系列的Macbook上运行？</title>
    <link href="https://wangxso.github.io/2022/04/23/%E5%A6%82%E4%BD%95%E8%AE%A9mininet%E5%9C%A8M1%E7%B3%BB%E5%88%97%E7%9A%84Macbook%E4%B8%8A%E8%BF%90%E8%A1%8C%EF%BC%9F/"/>
    <id>https://wangxso.github.io/2022/04/23/%E5%A6%82%E4%BD%95%E8%AE%A9mininet%E5%9C%A8M1%E7%B3%BB%E5%88%97%E7%9A%84Macbook%E4%B8%8A%E8%BF%90%E8%A1%8C%EF%BC%9F/</id>
    <published>2022-04-22T21:43:00.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、你可以尝试在Docker上运行或者自己构建镜像，已知的是mininet在Ubuntu-20-04-LTS-arm64-版本上是由相关的包存在的，你也可以选择在github上面下载。"><a href="#一、你可以尝试在Docker上运行或者自己构建镜像，已知的是mininet在Ubuntu-20-04-LTS-arm64-版本上是由相关的包存在的，你也可以选择在github上面下载。" class="headerlink" title="一、你可以尝试在Docker上运行或者自己构建镜像，已知的是mininet在Ubuntu 20.04 LTS arm64 版本上是由相关的包存在的，你也可以选择在github上面下载。"></a>一、你可以尝试在Docker上运行或者自己构建镜像，已知的是mininet在Ubuntu 20.04 LTS arm64 版本上是由相关的包存在的，你也可以选择在github上面下载。</h2><h2 id="二、使用虚拟机安装"><a href="#二、使用虚拟机安装" class="headerlink" title="二、使用虚拟机安装"></a>二、使用虚拟机安装</h2><p>你有两种选择：</p><ul><li>Parallels Desktop for ARM 收费</li><li><a href="https://customerconnect.vmware.com/downloads/get-download?downloadGroup=FUS-PUBTP-2021H1">Vmware Fusion Player</a> 个人免费</li></ul><ol><li><p>下载安装虚拟机，具体步骤按不同而定吧</p></li><li><p>安装完成后下载[Ubuntu 20.04 LTS arm64](<a href="https://ubuntu.com/download/server/arm">Ubuntu for ARM | Download | Ubuntu</a>)的镜像，如果你用的PD的话就可以直接选择下载默认的镜像。</p></li><li><p>安装Ubuntu，这个没什么其他的操作了。</p></li><li><p>安装完成后我们修改ubuntu的镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo nano /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后加入一下内容</span></span><br><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>安装mininet</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mininet</span><br><span class="line">sudo mn --version</span><br><span class="line">2.2.2</span><br></pre></td></tr></table></figure></li><li><p>安装其他软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install iperf3 wireshark hping3 -y</span><br></pre></td></tr></table></figure></li><li><p>配置X11转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">CTRL + W 搜索 X11</span><br><span class="line">X11Forwarding <span class="built_in">yes</span></span><br><span class="line">X11DisplayOffset 10</span><br><span class="line"></span><br><span class="line">搜索ROOT</span><br><span class="line">改成</span><br><span class="line"><span class="comment"># 这是为了等下登录可以使用root账号登录</span></span><br><span class="line">PermitRootLogin <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">CTRL + o 保存</span><br><span class="line">CTRL + x 退出</span><br><span class="line"></span><br><span class="line">sudo service sshd restart</span><br><span class="line"></span><br><span class="line">sudo su</span><br><span class="line"></span><br><span class="line">passwd</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Mac端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew install XQuartz</span><br><span class="line">sudo vim /etc/ssh/ssh_config</span><br><span class="line">ForwardX11 <span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 重启下mac</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure></li><li><p>然后就可以连接了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -AY root@192.168.100.1</span><br><span class="line">sudo mn</span><br><span class="line">xterm h1</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、你可以尝试在Docker上运行或者自己构建镜像，已知的是mininet在Ubuntu-20-04-LTS-arm64-版本上是由相关的包存在的，你也可以选择在github上面下载。&quot;&gt;&lt;a href=&quot;#一、你可以尝试在Docker上运行或者自己构建镜像，已知</summary>
      
    
    
    
    <category term="zczb" scheme="https://wangxso.github.io/categories/zczb/"/>
    
    
  </entry>
  
  <entry>
    <title>如何构建一个CUDA aware的Open MPI？</title>
    <link href="https://wangxso.github.io/2022/03/22/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AACUDA%20aware%E7%9A%84Open%20MPI%EF%BC%9F/"/>
    <id>https://wangxso.github.io/2022/03/22/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AACUDA%20aware%E7%9A%84Open%20MPI%EF%BC%9F/</id>
    <published>2022-03-21T23:11:00.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>编译后出现了错误<br>mpicc: error while loading shared libraries: &gt; libopen-pal.so.0: cannot open shared object &gt; &gt; file: No such file or directory<br>我们可以使用<br> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><br>来解决</p></blockquote><h2 id="1-如何让Open-Mpi支持-CUDA-aware"><a href="#1-如何让Open-Mpi支持-CUDA-aware" class="headerlink" title="1. 如何让Open Mpi支持 CUDA-aware"></a>1. 如何让Open Mpi支持 CUDA-aware</h2><p>CUDA-aware 可以让你的MPI能够直接的发送和接收GPU缓存</p><p>Open MPI 提供了两种不同的CUDA支持</p><h3 id="1-使用-UCX"><a href="#1-使用-UCX" class="headerlink" title="(1). 使用 UCX."></a>(1). 使用 <a href="https://openucx.org/">UCX</a>.</h3><p>这是你首选的一种机制，同时要确保你的ucx是使用了CUDA支持而构建的。你可以检查你的UCX是否支持CUDA。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Check <span class="keyword">if</span> ucx was built with CUDA support</span></span><br><span class="line">ucx_info -v</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">configured with: --build=powerpc64le-redhat-linux-gnu --host=powerpc64le-redhat-linux-gnu --program-prefix= --disable-dependency-tracking --prefix=/usr --exec-prefix=/usr --bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --datadir=/usr/share --includedir=/usr/include --libdir=/usr/lib64 --libexecdir=/usr/libexec --localstatedir=/var --sharedstatedir=/var/lib --mandir=/usr/share/man --infodir=/usr/share/info --disable-optimizations --disable-logging --disable-debug --disable-assertions --enable-mt --disable-params-check --enable-cma --without-cuda --without-gdrcopy --with-verbs --with-cm --with-knem --with-rdmacm --without-rocm --without-xpmem --without-ugni --without-java</span></span><br></pre></td></tr></table></figure><p>然后就是构建Open MPI同时使用UCX</p><ul><li><p>获取最新的MPI版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/open-mpi/ompi.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ompi</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./autogen.pl</span></span><br></pre></td></tr></table></figure></li><li><p>编译UCX</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> build-ucx</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> build-ucx</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">../configure --prefix=&lt;ompi-install-path&gt; --with-ucx=&lt;ucx-install-path&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 在Open MPI 4.0 + ，可能会报”btl_uct”组件编译失败的错误，这个组件并不重要，我们可以通过以下方式禁用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure ... --enable-mca-no-build=btl-uct ...</span></span><br></pre></td></tr></table></figure></li><li><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make install</span></span><br></pre></td></tr></table></figure></li><li><p>运行MPI </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mpirun -np 2 -mca pml ucx -x UCX_NET_DEVICES=mlx5_0:1 ./app</span></span><br></pre></td></tr></table></figure><blockquote><p>最近的OpenMPI版本包含一个名为“uct”的BTL组件，它可能导致在OPAL和UCM之间的Malloc钩子冲突时启用数据损坏。为了解决这个问题，使用以下替代方案之一:</p></blockquote><ul><li>方法1 禁止将该组件编译进来<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure ... --enable-mca-no-build=btl-uct ...</span></span><br></pre></td></tr></table></figure></li><li>方法2 禁止组件运行<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mpirun -np 2 -mca pml ucx -mca btl ^uct -x UCX_NET_DEVICES=mlx5_0:1 ./app</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>运行调试<br>默认情况下，OpenMPI允许构建传输（BTL），这可能导致OpenMPI进度函数中的其他软件开销。为了解决此问题，您可能会尝试禁用某些BTL。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mpirun -np 2 -mca pml ucx --mca btl ^vader,tcp,openib,uct -x UCX_NET_DEVICES=mlx5_0:1 ./app</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-使用内部的Open-MPI-CUDA支持"><a href="#2-使用内部的Open-MPI-CUDA支持" class="headerlink" title="(2). 使用内部的Open MPI CUDA支持"></a>(2). 使用内部的Open MPI CUDA支持</h3><p>你可以使用<code>--with-cuda=&lt;path-to-cuda&gt;</code>来构建你的MPI支持CUDA</p><h2 id="2-验证安装"><a href="#2-验证安装" class="headerlink" title="2. 验证安装"></a>2. 验证安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use ompi_info to verify cuda support <span class="keyword">in</span> Open MPI</span></span><br><span class="line"><span class="meta prompt_">shell$ </span><span class="language-bash">./ompi_info |grep <span class="string">&quot;MPI extensions</span></span></span><br></pre></td></tr></table></figure><p>显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MPI extensions: affinity, cuda, pcollreq</span><br></pre></td></tr></table></figure><h2 id="3-CUDA-aware支持的MPI-API"><a href="#3-CUDA-aware支持的MPI-API" class="headerlink" title="3. CUDA-aware支持的MPI API"></a>3. CUDA-aware支持的MPI API</h2><ul><li><p>MPI_Allgather</p></li><li><p>MPI_Allgatherv</p></li><li><p>MPI_Allreduce</p></li><li><p>MPI_Alltoall</p></li><li><p>MPI_Alltoallv</p></li><li><p>MPI_Alltoallw</p></li><li><p>MPI_Bcast</p></li><li><p>MPI_Bsend</p></li><li><p>MPI_Bsend_init</p></li><li><p>MPI_Exscan</p></li><li><p>MPI_Ibsend</p></li><li><p>MPI_Irecv</p></li><li><p>MPI_Isend</p></li><li><p>MPI_Irsend</p></li><li><p>MPI_Issend</p></li><li><p>MPI_Gather</p></li><li><p>MPI_Gatherv</p></li><li><p>MPI_Get</p></li><li><p>MPI_Put</p></li><li><p>MPI_Rsend</p></li><li><p>MPI_Rsend_init</p></li><li><p>MPI_Recv</p></li><li><p>MPI_Recv_init</p></li><li><p>MPI_Reduce</p></li><li><p>MPI_Reduce_scatter</p></li><li><p>MPI_Reduce_scatter_block</p></li><li><p>MPI_Scan</p></li><li><p>MPI_Scatter</p></li><li><p>MPI_Scatterv</p></li><li><p>MPI_Send</p></li><li><p>MPI_Send_init</p></li><li><p>MPI_Sendrecv</p></li><li><p>MPI_Ssend</p></li><li><p>MPI_Ssend_init</p></li><li><p>MPI_Win_create</p></li></ul><h2 id="5-CUDA-aware-不支持的API"><a href="#5-CUDA-aware-不支持的API" class="headerlink" title="5. CUDA aware 不支持的API"></a>5. CUDA aware 不支持的API</h2><ul><li><p>MPI_Accumulate</p></li><li><p>MPI_Compare_and_swap</p></li><li><p>MPI_Fetch_and_op</p></li><li><p>MPI_Get_Accumulate</p></li><li><p>MPI_Iallgather</p></li><li><p>MPI_Iallgatherv</p></li><li><p>MPI_Iallreduce</p></li><li><p>MPI_Ialltoall</p></li><li><p>MPI_Ialltoallv</p></li><li><p>MPI_Ialltoallw</p></li><li><p>MPI_Ibcast</p></li><li><p>MPI_Iexscan</p></li><li><p>MPI_Rget</p></li><li><p>MPI_Rput</p></li></ul><blockquote><p>参考资料 ：<br>[1]. <a href="https://docs.open-mpi.org/en/master/networking/cuda.html?highlight=cuda">The Open MPI documentation CUDA Section</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;编译后出现了错误&lt;br&gt;mpicc: error while loading shared libraries: &amp;gt; libopen-pal.so.0: cannot open shared object &amp;gt; &amp;gt; file: No</summary>
      
    
    
    
    <category term="cuda" scheme="https://wangxso.github.io/categories/cuda/"/>
    
    
  </entry>
  
  <entry>
    <title>关于武大网安复试的一些QA</title>
    <link href="https://wangxso.github.io/2022/03/05/%E5%85%B3%E4%BA%8E%E6%AD%A6%E5%A4%A7%E7%BD%91%E5%AE%89%E5%A4%8D%E8%AF%95%E7%9A%84%E4%B8%80%E4%BA%9BQA/"/>
    <id>https://wangxso.github.io/2022/03/05/%E5%85%B3%E4%BA%8E%E6%AD%A6%E5%A4%A7%E7%BD%91%E5%AE%89%E5%A4%8D%E8%AF%95%E7%9A%84%E4%B8%80%E4%BA%9BQA/</id>
    <published>2022-03-05T02:38:00.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<p>[scode type&#x3D;”green”]<br>Q:复试的笔试是什么形式？<br>A:笔试一般是几道简答题，没有客观题(选择或填空)。基本上是言之有理即可得分，然后考察的是《信息系统安全概论》书上的相关内容，你只需要熟悉相关的即可，不用死记硬背。<br>[&#x2F;scode]</p><p>[scode type&#x3D;”green”]<br>Q: 复试的流程是怎么样的?<br>A: 去年的情况是第一天参加笔试，笔试完第二天上午抽签选择不同组面试，然后第二天下午进行面试。<br>[&#x2F;scode]</p><p>[scode type&#x3D;”green”]<br>Q: 我们的面试有自我介绍吗？英语面试的形式是怎么样的？<br>A：去年的面试是没有自我介绍的环节，英语面试是直接让你抽纸条选两个题目问你。没有单独的英语听力测试，在问你的同时就考察听说的能力。<br>[&#x2F;scode]</p><p>[scode type&#x3D;”green”]</p><p>Q: 如果线下可以给老师发简历吗？<br>A：可以我也建议你准备简历，最好准备个10份，不然到时候当场不够发就难受了。</p><p>[&#x2F;scode]</p><p>[scode type&#x3D;”green”]</p><p>Q: 想知道复试每个部分：英语问答，专业课问答每部分大概多久？大概几个问题？<br>A：一般来说英语的话在三四分钟，专业课大概十几分钟，英语有两个问题，专业课一般一个老师问一个问题一共八个左右。</p><p>[&#x2F;scode]</p><hr><p>一些资料我发在这里，评论后可见哦，拒绝白嫖。</p><p>「信息系统安全」<a href="https://www.aliyundrive.com/s/AKtr62C9Zkc">https://www.aliyundrive.com/s/AKtr62C9Zkc</a><br>点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。</p><p>你有什么问题也可在评论区问，我有时间会回的。<br>你要是急的话可以发邮件给我 <a href="mailto:&#119;&#97;&#x6e;&#103;&#120;&#x5f;&#48;&#x31;&#48;&#50;&#x40;&#x31;&#x32;&#54;&#x2e;&#99;&#x6f;&#109;">&#119;&#97;&#x6e;&#103;&#120;&#x5f;&#48;&#x31;&#48;&#50;&#x40;&#x31;&#x32;&#54;&#x2e;&#99;&#x6f;&#109;</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[scode type&amp;#x3D;”green”]&lt;br&gt;Q:复试的笔试是什么形式？&lt;br&gt;A:笔试一般是几道简答题，没有客观题(选择或填空)。基本上是言之有理即可得分，然后考察的是《信息系统安全概论》书上的相关内容，你只需要熟悉相关的即可，不用死记硬背。&lt;br&gt;[&amp;#x2</summary>
      
    
    
    
    <category term="zczb" scheme="https://wangxso.github.io/categories/zczb/"/>
    
    
  </entry>
  
  <entry>
    <title>【LeetCode】第71场 双周赛补题</title>
    <link href="https://wangxso.github.io/2022/03/04/%E3%80%90LeetCode%E3%80%91%E7%AC%AC71%E5%9C%BA%20%E5%8F%8C%E5%91%A8%E8%B5%9B%E8%A1%A5%E9%A2%98/"/>
    <id>https://wangxso.github.io/2022/03/04/%E3%80%90LeetCode%E3%80%91%E7%AC%AC71%E5%9C%BA%20%E5%8F%8C%E5%91%A8%E8%B5%9B%E8%A1%A5%E9%A2%98/</id>
    <published>2022-03-04T04:51:13.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第71场-双周赛补题"><a href="#第71场-双周赛补题" class="headerlink" title="第71场 双周赛补题"></a>第71场 双周赛补题</h1><h2 id="第一题-2160-拆分数位后四位数字的最小和"><a href="#第一题-2160-拆分数位后四位数字的最小和" class="headerlink" title="第一题 2160. 拆分数位后四位数字的最小和"></a>第一题 <a href="https://leetcode-cn.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/">2160. 拆分数位后四位数字的最小和</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>[scode type&#x3D;”share”]</p><p>给你一个四位 正 整数 num 。请你使用 num 中的 数位 ，将 num 拆成两个新的整数 new1 和 new2 。new1 和 new2 中可以有 前导 0 ，且 num 中 所有 数位都必须使用。</p><p>比方说，给你 num &#x3D; 2932 ，你拥有的数位包括：两个 2 ，一个 9 和一个 3 。一些可能的 [new1, new2] 数对为 [22, 93]，[23, 92]，[223, 9] 和 [2, 329] 。<br>请你返回可以得到的 new1 和 new2 的 最小 和。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits">https://leetcode-cn.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>[&#x2F;scode]</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先我们知道，两个两位数相加一般来说都是比一个一位数加上一个三位数来的小的。所以这里我们只需要把这四个数变成两个两位数即可，这样我们只需要把这两个两位数的十位为最小的两个数，然后剩下的两个数作为百位即可。</p><ul><li>2932 –拆分-&gt;[2, 9, 3, 2] –排序–&gt; [2, 2, 3 ,9] –重组-&gt; [2, 3] + [2, 9] &#x3D; 52</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumSum</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">remind</span> <span class="operator">=</span> num % <span class="number">10</span>;</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">            nums[cnt++] = remind;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]*<span class="number">10</span> + nums[<span class="number">1</span>] * <span class="number">10</span> + nums[<span class="number">2</span>] + nums[<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二题-2161-根据给定数字划分数组"><a href="#第二题-2161-根据给定数字划分数组" class="headerlink" title="第二题 2161. 根据给定数字划分数组"></a>第二题 <a href="https://leetcode-cn.com/problems/partition-array-according-to-given-pivot/">2161. 根据给定数字划分数组</a></h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>[scode type&#x3D;”share”]</p><p>给你一个下标从 0 开始的整数数组 nums 和一个整数 pivot 。请你将 nums 重新排列，使得以下条件均成立：</p><p>所有小于 pivot 的元素都出现在所有大于 pivot 的元素 之前 。<br>所有等于 pivot 的元素都出现在小于和大于 pivot 的元素 中间 。<br>小于 pivot 的元素之间和大于 pivot 的元素之间的 相对顺序 不发生改变。<br>更正式的，考虑每一对 pi，pj ，pi 是初始时位置 i 元素的新位置，pj 是初始时位置 j 元素的新位置。对于小于 pivot 的元素，如果 i &lt; j 且 nums[i] &lt; pivot 和 nums[j] &lt; pivot 都成立，那么 pi &lt; pj 也成立。类似的，对于大于 pivot 的元素，如果 i &lt; j 且 nums[i] &gt; pivot 和 nums[j] &gt; pivot 都成立，那么 pi &lt; pj 。<br>请你返回重新排列 nums 数组后的结果数组。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/partition-array-according-to-given-pivot">https://leetcode-cn.com/problems/partition-array-according-to-given-pivot</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>[&#x2F;scode]</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>一开始我想用快速排序的思路写的，然后xjb写了一通不太对，然后干脆就暴力一点开三个数组，一个存比<code>Pivot</code>小的叫做<code>left[]</code>, 比<code>pivot</code>大的叫做<code>right[]</code>, 和<code>Pivot</code>一样大的叫做<code>mid[]</code>，然后把他们合并，复杂度应该是<code>O(N)</code></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] pivotArray(<span class="type">int</span>[] nums, <span class="type">int</span> pivot) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">posl</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">posr</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">posm</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] l = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span>[] r = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span>[] m = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num &lt; pivot) &#123;</span><br><span class="line">                l[posl++] = num;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &gt; pivot) &#123;</span><br><span class="line">                r[posr++] = num;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                m[posm++] = num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; posl; i++) &#123;</span><br><span class="line">            nums[cnt++] = l[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; posm; i++) &#123;</span><br><span class="line">            nums[cnt++] = m[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; posr; i++) &#123;</span><br><span class="line">            nums[cnt++] = r[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三题-2162-设置时间的最少代价"><a href="#第三题-2162-设置时间的最少代价" class="headerlink" title="第三题 2162. 设置时间的最少代价"></a>第三题 <a href="https://leetcode-cn.com/problems/minimum-cost-to-set-cooking-time/">2162. 设置时间的最少代价</a></h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>[scode type&#x3D;”yellow”]</p><p>这题读题有点难受，我看了一些别人的理解才想清楚是怎么回事。</p><p>看了一下才理解，startAt就是初始数字是多少，move就是换数字，push就是确定键。 然后就能理解下面的行为。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 1 0 0 0 ，表示 10 分 0 秒。</span><br><span class="line">  手指一开始就在数字 1 处，输入 1 （代价为 1），移到 0 处（代价为 2），输入 0（代价为 1），输入 0（代价为 1），输入 0（代价为 1）。</span><br><span class="line">  总代价为：1 + 2 + 1 + 1 + 1 = 6 。这是所有方案中的最小代价。</span><br></pre></td></tr></table></figure><p>[&#x2F;scode] </p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>这题读懂题后我们知道如果前导为0的话我们直接不用管前面的0，比如输入 <code>0</code> <code>0</code> <code>0</code> <code>8</code> （四个数字），表示 <code>0</code> 分 <code>8</code> 秒。所以只用设定8秒就行。<strong>当然这里我们要考虑两种情况，就是后面的秒大于60和小于60的情况，我们只需要考虑<code>(分钟数，秒数)</code> 和 <code>(分钟数-1， 秒数+60)</code>两种情况，并且判断分钟数和秒数是否合法即可。</strong>我们以<code>startAt = 1, </code>,  <code>moveCost = 2</code>, <code>pushCost = 1</code>, <code>targetSeconds = 600</code>为例子，我们计算第一种情况下的数据<code>(minutes=10, seconds=00)</code>,我们的<code>startAt</code>为<code>1</code>所以我们不需要移动只需要执行<code>push</code>即可，所以<code>ansCost += pushCost</code>,然后我们发现当前为<code>0</code>,<code> 0 != 1</code>所以移动一位有<code>ansCost += moveCost</code>, 这时候我们需要更新下当前的<code>startAt  = now</code>.</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCostSetTime</span><span class="params">(<span class="type">int</span> startAt, <span class="type">int</span> moveCost, <span class="type">int</span> pushCost, <span class="type">int</span> targetSeconds)</span> &#123;</span><br><span class="line">        <span class="comment">// case 1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">minute</span> <span class="operator">=</span> targetSeconds / <span class="number">60</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> targetSeconds % <span class="number">60</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans1</span> <span class="operator">=</span> minCostTime(startAt, moveCost, pushCost, minute, second);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans2</span> <span class="operator">=</span> minCostTime(startAt, moveCost, pushCost, minute-<span class="number">1</span>, second+<span class="number">60</span>);</span><br><span class="line">        <span class="keyword">return</span> Math.min(ans1, ans2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCostTime</span><span class="params">(<span class="type">int</span> startAt, <span class="type">int</span> moveCost, <span class="type">int</span> pushCost, <span class="type">int</span> minute, <span class="type">int</span> second)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (minute &gt; <span class="number">99</span> || minute &lt; <span class="number">0</span> || second &gt; <span class="number">99</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// section1 60秒的情况</span></span><br><span class="line">        <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">        nums[<span class="number">0</span>] = minute/<span class="number">10</span>;</span><br><span class="line">        nums[<span class="number">1</span>] = minute%<span class="number">10</span>;</span><br><span class="line">        nums[<span class="number">2</span>] = second/<span class="number">10</span>;</span><br><span class="line">        nums[<span class="number">3</span>] = second%<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cnt  &lt; <span class="number">4</span> &amp;&amp; nums[cnt] == <span class="number">0</span>) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ansCost</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> startAt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cnt; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="keyword">if</span> (d != prev) &#123;</span><br><span class="line">                prev = d;</span><br><span class="line">                ansCost += moveCost;</span><br><span class="line">            &#125;</span><br><span class="line">            ansCost += pushCost;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ansCost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第71场-双周赛补题&quot;&gt;&lt;a href=&quot;#第71场-双周赛补题&quot; class=&quot;headerlink&quot; title=&quot;第71场 双周赛补题&quot;&gt;&lt;/a&gt;第71场 双周赛补题&lt;/h1&gt;&lt;h2 id=&quot;第一题-2160-拆分数位后四位数字的最小和&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://wangxso.github.io/categories/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>【LeetCode】第279场周赛</title>
    <link href="https://wangxso.github.io/2022/03/03/%E3%80%90LeetCode%E3%80%91%E7%AC%AC279%E5%9C%BA%E5%91%A8%E8%B5%9B/"/>
    <id>https://wangxso.github.io/2022/03/03/%E3%80%90LeetCode%E3%80%91%E7%AC%AC279%E5%9C%BA%E5%91%A8%E8%B5%9B/</id>
    <published>2022-03-03T02:07:59.000Z</published>
    <updated>2023-09-14T08:02:30.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第279场周赛"><a href="#第279场周赛" class="headerlink" title="第279场周赛"></a>第279场周赛</h1><h2 id="第一题-2164-对奇偶下标分别排序"><a href="#第一题-2164-对奇偶下标分别排序" class="headerlink" title="第一题 2164. 对奇偶下标分别排序"></a>第一题 2164. 对奇偶下标分别排序</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>给你一个下标从 0 开始的整数数组 nums 。根据下述规则重排 nums 中的值：<br>按 非递增 顺序排列 nums 奇数下标 上的所有值。<br>举个例子，如果排序前 nums &#x3D; [4,1,2,3] ，对奇数下标的值排序后变为 [4,3,2,1] 。奇数下标 1 和 3 的值按照非递增顺序重排。<br>按 非递减 顺序排列 nums 偶数下标 上的所有值。<br>举个例子，如果排序前 nums &#x3D; [4,1,2,3] ，对偶数下标的值排序后变为 [2,1,4,3] 。偶数下标 0 和 2 的值按照非递减顺序重排。<br>返回重排 nums 的值之后形成的数组。<br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/sort-even-and-odd-indices-independently">https://leetcode-cn.com/problems/sort-even-and-odd-indices-independently</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>一个水题，但是我脑子嗡嗡的，写了半个小时。</p><p>我的思路是把奇数位的放入一个数组排序，然后把偶数位的放入一个数组排序。然后合并。</p><p>算法复杂度应该是O(N), 精确点就是2N。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span>[] sortEvenOdd(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length &lt;= <span class="number">2</span>) <span class="keyword">return</span> nums;</span><br><span class="line">        List&lt;Integer&gt; odd = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; even = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                odd.add(nums[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                even.add(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        odd.sort((o1, o2) -&gt; o2 - o1);</span><br><span class="line">        Collections.sort(even);</span><br><span class="line">        <span class="type">int</span> <span class="variable">oddIdx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">evenIdx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">val</span> <span class="operator">=</span> odd.get(oddIdx++);</span><br><span class="line">                nums[i] = val;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">val</span> <span class="operator">=</span> even.get(evenIdx++);</span><br><span class="line">                nums[i] = val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第二题-2165-重排数字的最小值"><a href="#第二题-2165-重排数字的最小值" class="headerlink" title="第二题 2165. 重排数字的最小值"></a>第二题 <a href="https://leetcode-cn.com/problems/smallest-value-of-the-rearranged-number/">2165. 重排数字的最小值</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>给你一个整数 num 。重排 num 中的各位数字，使其值 最小化 且不含 任何 前导零。</p><p>返回不含前导零且值最小的重排数字。</p><p>注意，重排各位数字后，num 的符号不会改变。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/smallest-value-of-the-rearranged-number">https://leetcode-cn.com/problems/smallest-value-of-the-rearranged-number</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul><li>对于正整数我们只需要把每一位数字取出，如[3,1,0]，然后对这个数组进行排序[0, 1, 3]，如果发现前导为0，我们就寻找第一个不为0的数字和第一位交换。这里也就是<code>0 &lt;-&gt; 1</code>，最后变为[1, 0, 3]。<ul><li>[4, 0, 0, 3, 2] —-排序—&gt; [0, 0, 2, 3, 4] —交换-&gt;[2, 0, 0, 3, 4]</li></ul></li><li>对于负数，我们取它的绝对值，然后要求调整位置使得这个绝对值最大，我们就可以把数字从大到小排序，这样就不会出现前导为0，我们直接算出就可以。注意最后要写成负数。<ul><li>-[7, 6, 0, 5] —-&gt;-[7,6,5,0]</li></ul></li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">smallestNumber</span><span class="params">(<span class="type">long</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        List&lt;Long&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            num = -num;</span><br><span class="line">            <span class="type">long</span> <span class="variable">tmp</span> <span class="operator">=</span> num;</span><br><span class="line">            <span class="keyword">while</span> (tmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">remind</span> <span class="operator">=</span> tmp % <span class="number">10</span>;</span><br><span class="line">                tmp /= <span class="number">10</span>;</span><br><span class="line">                list.add(remind);</span><br><span class="line">            &#125;</span><br><span class="line">            list.sort((o1, o2) -&gt; (<span class="type">int</span>) (o2 - o1));</span><br><span class="line">            <span class="type">long</span> <span class="variable">pow</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> list.size()-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">                ans += pow * n;</span><br><span class="line">                pow *= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = -ans;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">tmp</span> <span class="operator">=</span> num;</span><br><span class="line">            <span class="keyword">while</span> (tmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">remind</span> <span class="operator">=</span> tmp % <span class="number">10</span>;</span><br><span class="line">                tmp /= <span class="number">10</span>;</span><br><span class="line">                list.add(remind);</span><br><span class="line">            &#125;</span><br><span class="line">            Collections.sort(list);</span><br><span class="line">            <span class="keyword">if</span> (list.get(<span class="number">0</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (list.get(i) != <span class="number">0</span>) &#123;</span><br><span class="line">                        end = i;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">long</span> <span class="variable">next</span> <span class="operator">=</span> list.get(end);</span><br><span class="line">                list.set(end, <span class="number">0L</span>);</span><br><span class="line">                list.set(<span class="number">0</span>, next);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> <span class="variable">pow</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> list.size()-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">                ans += pow * n;</span><br><span class="line">                pow *= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三题-2166-设计位集"><a href="#第三题-2166-设计位集" class="headerlink" title="第三题 2166. 设计位集"></a>第三题 <a href="https://leetcode-cn.com/problems/design-bitset/">2166. 设计位集</a></h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><blockquote><p>位集 Bitset 是一种能以紧凑形式存储位的数据结构。</p><p>请你实现 Bitset 类。</p><p>Bitset(int size) 用 size 个位初始化 Bitset ，所有位都是 0 。<br>void fix(int idx) 将下标为 idx 的位上的值更新为 1 。如果值已经是 1 ，则不会发生任何改变。<br>void unfix(int idx) 将下标为 idx 的位上的值更新为 0 。如果值已经是 0 ，则不会发生任何改变。<br>void flip() 翻转 Bitset 中每一位上的值。换句话说，所有值为 0 的位将会变成 1 ，反之亦然。<br>boolean all() 检查 Bitset 中 每一位 的值是否都是 1 。如果满足此条件，返回 true ；否则，返回 false 。<br>boolean one() 检查 Bitset 中 是否 至少一位 的值是 1 。如果满足此条件，返回 true ；否则，返回 false 。<br>int count() 返回 Bitset 中值为 1 的位的 总数 。<br>String toString() 返回 Bitset 的当前组成情况。注意，在结果字符串中，第 i 个下标处的字符应该与 Bitset 中的第 i 位一致。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/design-bitset">https://leetcode-cn.com/problems/design-bitset</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>一开始沙比Σ(☉▽☉”a，没看数据的范围</p><ul><li><code>1 &lt;= size &lt;= 105</code></li><li><code>0 &lt;= idx &lt;= size - 1</code></li></ul><p>然后直接用char(16bit)做直接爆了，然后才看了下官方的做法。</p><h4 id="错误的方法，用char进行位运算直接做"><a href="#错误的方法，用char进行位运算直接做" class="headerlink" title="错误的方法，用char进行位运算直接做"></a>错误的方法，用char进行位运算直接做</h4><p>错误的做法如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bitset</span> &#123;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">char</span> bitSet;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bitset</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">        <span class="built_in">this</span>.bitSet = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fix</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">change</span> <span class="operator">=</span> (<span class="type">int</span>) Math.pow(<span class="number">2</span>, <span class="built_in">this</span>.size - idx - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">this</span>.bitSet = (<span class="type">char</span>) (<span class="built_in">this</span>.bitSet | change);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unfix</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">change</span> <span class="operator">=</span> ~(<span class="type">int</span>) Math.pow(<span class="number">2</span>, <span class="built_in">this</span>.size - idx - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">this</span>.bitSet = (<span class="type">char</span>) (<span class="built_in">this</span>.bitSet &amp; change);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flip</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bitSet = (<span class="type">char</span>) ((~<span class="built_in">this</span>.bitSet));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">all</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="built_in">this</span>.bitSet;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cnt &lt; <span class="built_in">this</span>.size) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((tmp &amp; <span class="number">1</span>) != <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt++;</span><br><span class="line">            tmp &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">one</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="built_in">this</span>.bitSet;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cnt &lt; <span class="built_in">this</span>.size) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((tmp &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt++;</span><br><span class="line">            tmp &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="built_in">this</span>.bitSet;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (p &lt; <span class="built_in">this</span>.size) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((tmp &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            p++;</span><br><span class="line">            tmp &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="built_in">this</span>.bitSet;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.size; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">remind</span> <span class="operator">=</span>tmp % <span class="number">2</span>;</span><br><span class="line">            tmp /= <span class="number">2</span>;</span><br><span class="line">            sb.append(remind);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.reverse();</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="正确的方法，用数组模拟bit位进行运算"><a href="#正确的方法，用数组模拟bit位进行运算" class="headerlink" title="正确的方法，用数组模拟bit位进行运算"></a>正确的方法，用数组模拟bit位进行运算</h4><p>我们需要知道如果经过偶数次的<code>flip</code>，二进制数不变，所以我们用一个<code>reversed</code>的二进制位来表示是奇数次还是偶数次, <code>flip()</code>函数不真正改变<code>arr[]</code>里面的数字，而是在需要运算的时候才使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fix</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果它arr[idx]通过反转后为0的话</span></span><br><span class="line">        <span class="keyword">if</span> ((arr[idx] ^ reversed) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 那么就把这个位数变为1. 异或的规则是同0异1，也就是 0^1=1, 1^1=0, 0^0=0, 1^0=1</span></span><br><span class="line">            arr[idx] ^= <span class="number">1</span>;</span><br><span class="line">            ++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unfix</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果它arr[idx]通过反转后为1的话</span></span><br><span class="line">        <span class="keyword">if</span> ((arr[idx] ^ reversed) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 把这个变成0</span></span><br><span class="line">            arr[idx] ^= <span class="number">1</span>;</span><br><span class="line">            --cnt;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flip</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 记录反转次数， 0 异或 1 = 1 -&gt; 1 异或 1 = 0</span></span><br><span class="line">    <span class="comment">// 仅记录反转次数，不参与计算</span></span><br><span class="line">        reversed ^= <span class="number">1</span>;</span><br><span class="line">        cnt = arr.length - cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">all</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cnt == arr.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">one</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cnt &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 最后输出的时候把反转加上</span></span><br><span class="line">            sb.append(arr[i] ^ reversed);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.reverse();</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bitset</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr;</span><br><span class="line">    <span class="type">int</span> cnt ;</span><br><span class="line">    <span class="type">int</span> reversed;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bitset</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">        <span class="built_in">this</span>.cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.reversed = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fix</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果它arr[idx]通过反转后为0的话</span></span><br><span class="line">        <span class="keyword">if</span> ((arr[idx] ^ reversed) == <span class="number">0</span>) &#123;</span><br><span class="line">            arr[idx] ^= <span class="number">1</span>;</span><br><span class="line">            ++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unfix</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果它arr[idx]通过反转后为1的话</span></span><br><span class="line">        <span class="keyword">if</span> ((arr[idx] ^ reversed) == <span class="number">1</span>) &#123;</span><br><span class="line">            arr[idx] ^= <span class="number">1</span>;</span><br><span class="line">            --cnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flip</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 记录反转次数， 0 异或 1 = 1 -&gt; 1 异或 1 = 0</span></span><br><span class="line">        reversed ^= <span class="number">1</span>;</span><br><span class="line">        cnt = arr.length - cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">all</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cnt == arr.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">one</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cnt &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cnt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            sb.append(arr[i] ^ reversed);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.reverse();</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第279场周赛&quot;&gt;&lt;a href=&quot;#第279场周赛&quot; class=&quot;headerlink&quot; title=&quot;第279场周赛&quot;&gt;&lt;/a&gt;第279场周赛&lt;/h1&gt;&lt;h2 id=&quot;第一题-2164-对奇偶下标分别排序&quot;&gt;&lt;a href=&quot;#第一题-2164-对奇偶下标分</summary>
      
    
    
    
    <category term="算法" scheme="https://wangxso.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
</feed>
